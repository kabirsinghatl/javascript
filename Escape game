/** Variables **/
{
    smooth();
    noiseSeed(25);
    
    var r = 20, r2 = -20;
    
    var momentum = 1.1825;
    
    var planetSize = 0;
    
    var front = true, front2 = false;
    
    var scene = "menu";
    var innerScene = 0;
    var storyScene = 0;
    
    var boxClicked = false;
    
    var flame = 0;
    
    var particles = [];
    
    for (var i = 0; i < 200; i++) {
        particles.push({
            pos : new PVector(300, 300), 
            direc : random(360),
            veloc : new PVector(random(0.3, 5), random(0.3, 5)),
            size : random(10, 15)
        });
    }
    
    var newLevel, newClimb, newFight, newFly;
    
    var winBoss;
    
    var targetX = 300, targetY = 300;
    
    var curPlanet = 0;
    
    var glowColors = [
        color(255, 190, 130),
        color(200, 150, 180),
        color(195, 185, 175),
        color(220, 120, 80),
        color(150, 200, 200)
    ];
    
    var planetNames = [
        "Astronmagnus\nGalaxy",
        "Hautsa",
        "Mystys",
        "Hive",
        "Biochrome",
        "Lushcous"
    ];
    
    var planetStats = [
        "A galaxy with\nmany strange and\nwonderful planets.",
        "Desert planet\nenslaved by\nthe gremxula.",
        "A mysterious\nplanet covered\nin a thick\nlayer of mist.",
        "The main\nhive of\nthe gremxula.",
        "A planet\ninhabited\nby robots.",
        "A beautiful\nplanet yet\nto be conquered\nby the gremxula."
    ];
    
    var glowPoints = [
        [275, 140, 200, 200, 170, 120],
        [270, 40, 230, 100, 345, 85],
        [215, 315, 90, 260, 165, 180],
        [330, 330, 330, 200, 250, 220],
        [95, 40, 35, 100, 130, 120],
        [215, 380, 40, 300, 30, 240]
    ];
    
    var color1, color2, color3;
}

/** Text stuff **/
{
    textAlign(CENTER, CENTER);
    var f = createFont("monospace");
    var f2 = createFont("FreeSans Bold");
    var f3 = createFont("FreeSans");
}

/** Important variables **/
{
    var player = {};
    
    var climber, fighter, flyer;
    
    var keys = [];
    var curCharacter = saveCode[0];
    var unlocked = (saveCode[1] / 2) ^ (saveCode[2] - 1);
    var blockSize = 30;
    var scramble = Math.floor(random(0, 50));
    
    var click;
}

/** Flash scene transition **/
var flash = {
    fade : 255,
    display : function() {
        noStroke();
        fill(255, 255, 255, this.fade);
        rect(0, 0, 600, 600);
        this.fade -= 10;
    },
    reset : function() {
        this.fade = 255;
        
        switch (scene) {
            case "menu" :
                targetX = 300;
                targetY = 300;
                break;
            case "levelSelect":
            case "skins":
            case "story":
                targetX = 80;
                targetY = 90;
                break;
            case "planets":
                targetX = 75;
                targetY = 90;
                break;
        }
    }
};

/** Stars **/
{
    var stars = [];
    
    var twinkle;
    
    for (var i = 0; i < 100; i++) {
        stars.push({x : random(0, 600), y : random(0, 600), size : random(1, 3)});
    }
}

/** Sparkles **/
{
    var sparkles = [];
    
    var sparkleAmount = 12, sparkleSpeed = 0.5;
    
    var Sparkle = function() {
        this.x = targetX;
        this.y = targetY;
        while (this.checkOthers(sparkles) || dist(this.x, this.y, targetX, targetY) > 60) {
            this.x = targetX + random(-30, 30);
            this.y = targetY + random(-30, 30);
        }
        this.xVel = random(-1, 1);
        this.yVel = random(-1, 1);
        this.amount = random(0, 360);
    };
    
    Sparkle.prototype.display = function() {
        fill(170, 185, 255, 140 + sin(frameCount * 5 + this.amount) * 50);
        ellipse(this.x, this.y, 7, 7);
        fill(255, 255, 255, 100);
        ellipse(this.x, this.y, 4, 4);
    };
    
    Sparkle.prototype.move = function() {
        this.xVel -= this.x > targetX ? random(sparkleSpeed - 1, sparkleSpeed + 1) : 0;
        this.xVel += this.x < targetX ? random(sparkleSpeed - 1, sparkleSpeed + 1) : 0;
        this.yVel -= this.y > targetY ? random(sparkleSpeed - 1, sparkleSpeed + 1) : 0;
        this.yVel += this.y < targetY ? random(sparkleSpeed - 1, sparkleSpeed + 1) : 0;
        this.xVel = constrain(this.xVel, -7, 7);
        this.yVel = constrain(this.yVel, -7, 7);
        this.x += this.xVel;
        this.y += this.yVel;
    };
    
    Sparkle.prototype.checkOthers = function(list) {
        for (var i = 0; i < list.length; i++) {
            if (dist(this.x, this.y, list[i].x, list[i].y) < 7) {
                return true;
            }
        }
        return false;
    };
    
    for (var i = 0; i < sparkleAmount; i++) {
        sparkles.push(new Sparkle());
    }
}

/** Character graphics **/
{
    var nullPlayer = {x : 0, y : 0, moveX : 0, moveY : 0};
    
    var names = [
        "Lex",
        "Artemis",
        "Robert",
        "Sierra",
        "Martin",
        "Mia",
        "Captain Storm",
        "Lily",
        "Richard",
        "Eva"
    ];
    
    var curCharacter = 0;
        
    var eyes = function(lash, player) {
        stroke(0, 0, 0);
        strokeWeight(15);
        noFill();
        if (lash) {
            arc(160 + abs(player.moveX), 150 + player.moveY, 70, 50, 0, 160);
            arc(440 + abs(player.moveX), 150 + player.moveY, 70, 50, 20, 180);
        }
        noStroke();
        fill(0, 0, 0);
        ellipse(200 + abs(player.moveX), 200 + player.moveY, 80, 150);
        ellipse(400 + abs(player.moveX), 200 + player.moveY, 80, 150);
        fill(255, 255, 255);
        ellipse(205 + abs(player.moveX), 180 + player.moveY, 40, 75);
        ellipse(405 + abs(player.moveX), 180 + player.moveY, 40, 75);
    };
    
    var characterDesigns = [
        function(player) {
            fill(90, 190, 255);
            rect(0, 0, 600, 600);
            
            fill(70, 35, 0);
            beginShape();
            vertex(0, 70);
            vertex(0, -40);
            vertex(550, -150);
            vertex(450, -60);
            vertex(660, -80);
            vertex(600, 20);
            vertex(200, 20);
            endShape();
            
            eyes(false, player);
            
            pushMatrix();
            translate(Math.abs(player.moveX), player.moveY);
            
            fill(0, 0, 0);
            beginShape();
            vertex(140, 320);
            bezierVertex(140, 345, 240, 375, 350, 340);
            bezierVertex(300, 380, 155, 380, 125, 325);
            endShape();
            
            fill(70, 35, 0);
            
            beginShape();
            vertex(355, 85);
            bezierVertex(450, 60, 480, 90, 480, 90);
            bezierVertex(440, 90, 380, 90, 355, 110);
            endShape();
            
            beginShape();
            vertex(245, 85);
            bezierVertex(208, 90, 199, 60, 120, 90);
            bezierVertex(150, 90, 187, 90, 245, 110);
            endShape();
            
            popMatrix();
            
            fill(190, 170, 140);
            triangle(0, 450, 400, 600, 0, 600);
            triangle(600, 450, 200, 600, 600, 600);
            
            fill(120, 110, 100);
            
            quad(600, 450, 270, 580, 270, 520, 600, 390);
            
            fill(140, 130, 120);
            
            quad(0, 450, 330, 580, 330, 520, 0, 390);
            
            fill(100, 100, 100);
            
            fill(70, 70, 70);
            rect(0, 520, 600, 60);
            fill(130, 130, 130);
            for (var i = 0; i < 13; i++) {
                rect(i * 50 - 5, 520, 10, 60);
            }
            
        },
        function(player) {
            fill(85, 50, 0);
            ellipse(30, 0, 200, 200);
            fill(110, 75, 10);
            ellipse(55, 10, 150, 150);
            
            fill(255, 150, 240);
            rect(0, 0, 600, 600);
            
            fill(85, 50, 0);
            beginShape();
            vertex(0, 90);
            vertex(0, 0);
            vertex(600, 0);
            vertex(600, 90);
            vertex(400, 40);
            vertex(200, 40);
            endShape();
            
            eyes(true, player);
            
            pushMatrix();
            translate(Math.abs(player.moveX), player.moveY);
            
            fill(0, 0, 0);
            beginShape();
            vertex(170, 330);
            bezierVertex(170, 345, 315, 375, 380, 340);
            bezierVertex(340, 370, 280, 375, 155, 350);
            endShape();
            
            fill(85, 50, 0);
            
            beginShape();
            vertex(355, 85);
            bezierVertex(450, 70, 480, 115, 480, 120);
            bezierVertex(440, 90, 380, 90, 355, 110);
            endShape();
            
            beginShape();
            vertex(245, 85);
            bezierVertex(208, 90, 199, 50, 120, 120);
            bezierVertex(150, 90, 187, 90, 245, 110);
            endShape();
            
            popMatrix();
            
            fill(175, 175, 175);
            triangle(0, 450, 300, 600, 0, 600);
            triangle(600, 450, 300, 600, 600, 600);
            
            fill(120, 110, 100);
            
            quad(600, 450, 500, 600, 170, 600, 600, 390);
            
            fill(140, 130, 120);
            
            quad(0, 450, 100, 600, 430, 600, 0, 390);
            
            fill(100, 100, 100);
        },
        function(player) {
            fill(190, 245, 255);
            rect(0, 0, 600, 600);
            
            eyes(false, player);
            
            fill(145, 165, 85);
            rect(0, 450, 600, 150);
            noFill();
            stroke(0, 0, 0);
            strokeWeight(10);
            strokeCap(SQUARE);
            line(300, 450, 300, 600);
            
            noStroke();
            
            fill(0, 0, 0);
            ellipse(330, 480, 15, 15);
            ellipse(330, 520, 15, 15);
            ellipse(330, 560, 15, 15);
            
            fill(210, 195, 125);
            
            pushMatrix();
            translate(Math.abs(player.moveX), player.moveY);
            
            noFill();
            stroke(0, 0, 0);
            arc(300, 330, 150, 130, 20, 160);
            noStroke();
            
            fill(210, 195, 125);
            
            beginShape();
            vertex(355, 85);
            bezierVertex(450, 60, 480, 90, 480, 120);
            bezierVertex(440, 90, 380, 90, 355, 110);
            endShape();
            
            beginShape();
            vertex(245, 85);
            bezierVertex(208, 90, 160, 60, 120, 120);
            bezierVertex(150, 90, 187, 90, 245, 110);
            endShape();
            
            popMatrix();
        
            arc(0, 0, 400, 200, 0, 90);
            arc(600, 0, 400, 200, 91, 180);
            
            fill(240, 225, 150);
            arc(300, 0, 400, 200, 0, 180);
            arc(300, 0, 400, 400, 321, 360);
            triangle(300, 0, 400, -80, 370, -140);
            triangle(300, 0, 430, -80, 420, -150);  
        },
        function(player) {
            fill(255, 210, 90);
            rect(0, 0, 600, 600);
            eyes(true, player);
            
            fill(160, 220, 255);
            beginShape();
            vertex(0, 400);
            vertex(0, 600);
            vertex(600, 600);
            vertex(600, 400);
            vertex(540, 460);
            vertex(60, 460);
            endShape();
            
            noFill();
            stroke(0, 0, 0);
            strokeWeight(10);
            strokeCap(SQUARE);
            line(300, 460, 300, 600);
            noStroke();
            
            fill(0, 0, 0);
            ellipse(270, 500, 15, 15);
            ellipse(270, 540, 15, 15);
            
            pushMatrix();
            translate(Math.abs(player.moveX), player.moveY);
            
            noFill();
            stroke(0, 0, 0);
            arc(350, 330, 150, 130, 20, 100);
            arc(350, 330, 150, 130, 20, 100);
            noStroke();
            
            fill(0, 0, 0);
            beginShape();
            vertex(355, 85);
            bezierVertex(450, 70, 480, 90, 480, 120);
            bezierVertex(440, 90, 380, 90, 355, 110);
            endShape();
            
            beginShape();
            vertex(245, 85);
            bezierVertex(208, 90, 199, 50, 120, 120);
            bezierVertex(150, 90, 187, 90, 245, 110);
            endShape();
            
            popMatrix();
    
            beginShape();
            vertex(0, -30);
            vertex(600, -30);
            vertex(600, 0);
            vertex(50, 130);
            vertex(100, 80);
            vertex(0, 100);
            endShape();
            
            fill(90, 0, 210);
            beginShape();
            vertex(500, 24);
            vertex(250, 82);
            vertex(200, 142);
            vertex(322, 96);
            vertex(298, 131);
            endShape();
            
            fill(115, 180, 255);
            beginShape();
            vertex(600, 0);
            vertex(500, 24);
            vertex(298, 131);
            vertex(275, 160);
            vertex(525, 55);
            vertex(495, 130);
            vertex(600, 30);
            endShape();
            
            fill(50, 50, 50);
            beginShape();
            for (var i = 0; i < 5; i++) {
                vertex(555 + sin(i * 144 + 10) * 30, 535 + cos(i * 144 + 10) * 30);
            }
            endShape();
        },
        function(player) {
            fill(255, 235, 150);
            rect(0, 0, 600, 600);
            eyes(false, player);
            
            pushMatrix();
            translate(Math.abs(player.moveX), player.moveY);
            
            noFill();
            stroke(0, 0, 0);
            arc(240, 340, 130, 100, 90, 150);
            noStroke();
            
            fill(150, 100, 70);
            
            beginShape();
            vertex(355, 75);
            bezierVertex(450, 60, 480, 90, 480, 105);
            bezierVertex(440, 90, 380, 90, 355, 95);
            endShape();
            
            beginShape();
            vertex(245, 75);
            bezierVertex(250, 90, 160, 60, 120, 95);
            bezierVertex(160, 90, 180, 90, 245, 105);
            endShape();
            
            popMatrix();
            
            beginShape();
            vertex(0, 0);
            vertex(600, 0);
            vertex(600, 60);
            vertex(550, 30);
            vertex(550, 80);
            vertex(500, 50);
            vertex(500, 90);
            vertex(420, 45);
            vertex(420, 80);
            vertex(350, 50);
            vertex(350, 100);
            vertex(345, 120);
            vertex(320, 90);
            vertex(260, 60);
            vertex(265, 100);
            vertex(100, 40);
            vertex(30, 60);
            vertex(0, 30);
            endShape();
            
            fill(170, 210, 255);
            
            beginShape();
            vertex(0, 400);
            vertex(300, 500);
            vertex(600, 400);
            vertex(600, 600);
            vertex(0, 600);
            endShape();
            
            fill(75, 125, 255);
            rect(0, 560, 600, 40);
        },
        function(player) {
            fill(255, 235, 150);
            rect(0, 0, 600, 600);
            eyes(true, player);
            
            pushMatrix();
            translate(Math.abs(player.moveX), player.moveY);
            
            
            noFill();
            stroke(0, 0, 0);
            arc(240, 340, 130, 100, 90, 150);
            noStroke();
            
            fill(150, 100, 70);
            
            beginShape();
            vertex(355, 75);
            bezierVertex(450, 60, 480, 90, 480, 115);
            bezierVertex(440, 90, 380, 90, 355, 95);
            endShape();
            
            beginShape();
            vertex(245, 75);
            bezierVertex(250, 90, 140, 60, 120, 115);
            bezierVertex(160, 90, 180, 90, 245, 105);
            endShape();
            
            popMatrix();
            
            beginShape();
            vertex(0, 0);
            vertex(600, 0);
            vertex(600, 60);
            bezierVertex(400, 20, 200, 20, 0, 60);
            endShape();
            
            beginShape();
            vertex(30, 0);
            bezierVertex(-60, -100, -60, 35, -180, -50);
            bezierVertex(-130, 80, -60, 80, 0, 30);
            endShape();
            
            
            fill(255, 170, 240);
            
            beginShape();
            vertex(0, 400);
            vertex(300, 500);
            vertex(600, 400);
            vertex(600, 600);
            vertex(0, 600);
            endShape();
            
            fill(230, 75, 255);
            rect(0, 560, 600, 40);
        },
        function(player) {
            fill(255, 185, 90);
            rect(0, 0, 600, 600);
            
            eyes(false, player);
            
            fill(255, 255, 255);
            rect(0, 420, 600, 180);
            noFill();
            stroke(0, 0, 0);
            strokeWeight(10);
            strokeCap(SQUARE);
            line(300, 450, 300, 600);
            noStroke();
            
            fill(100, 100, 100);
            rect(285, 420, 30, 30);
            quad(290, 450, 310, 450, 315, 470, 285, 470);
            fill(255, 255, 255);
            rect(295, 430, 10, 10);
            
            pushMatrix();
            translate(Math.abs(player.moveX), player.moveY);
            
            noFill();
            stroke(0, 0, 0);
            
            arc(300, 330, 150, 100, 20, 160);
            noStroke();
            
            fill(0, 0, 0);
            
            beginShape();
            vertex(355, 75);
            bezierVertex(450, 60, 480, 90, 480, 120);
            bezierVertex(440, 90, 380, 90, 355, 100);
            endShape();
            
            beginShape();
            vertex(245, 75);
            bezierVertex(208, 90, 160, 60, 120, 120);
            bezierVertex(150, 90, 187, 90, 245, 100);
            endShape();
            
            popMatrix();
            
            strokeCap(SQUARE);
            stroke(255, 255, 255, 100);
            noFill();
            arc(300, 130, 860, 805, 135, 405);
            
            strokeWeight(50);
            arc(300, 105, 600, 600, 285, 320);
            arc(300, 90, 600, 600, 335, 345);
            noStroke();
        },
        function(player) {
            fill(75, 35, 0);
            ellipse(0, -20, 150, 150);
            ellipse(600, -20, 150, 150);
            
            fill(115, 55, 0);
            ellipse(20, -30, 100, 100);
            ellipse(620, -30, 100, 100);
            
            fill(75, 35, 0);
            rect(-40, -40, 680, 150, 100);
            
            fill(240, 205, 250);
            rect(0, 0, 600, 600);
            
            fill(75, 35, 0);
        
            pushMatrix();
            translate(0, 0);
            rotate(90);
            scale(1, 6);
            rect(0, 0, 10, -100, 1);
            popMatrix();
            
            eyes(true, player);
            
            fill(255, 255, 255);
            rect(0, 420, 600, 180);
            noFill();
            stroke(0, 0, 0);
            strokeWeight(10);
            strokeCap(SQUARE);
            line(300, 450, 300, 600);
            noStroke();
            
            fill(100, 100, 100);
            rect(285, 420, 30, 30);
            quad(290, 450, 310, 450, 315, 470, 285, 470);
            fill(255, 255, 255);
            rect(295, 430, 10, 10);
            
            pushMatrix();
            translate(Math.abs(player.moveX), player.moveY);
            
            noFill();
            stroke(0, 0, 0);
            arc(300, 330, 150, 100, 20, 160);
            noStroke();
            
            fill(0, 0, 0);
            
            beginShape();
            vertex(355, 75);
            bezierVertex(450, 40, 480, 105, 483, 120);
            bezierVertex(440, 80, 380, 75, 355, 100);
            endShape();
            
            beginShape();
            vertex(245, 75);
            bezierVertex(208, 70, 160, 50, 120, 120);
            bezierVertex(150, 90, 187, 70, 245, 100);
            endShape();
            
            popMatrix();
            
            strokeCap(SQUARE);
            stroke(255, 255, 255, 100);
            noFill();
            arc(300, 130, 860, 805, 135, 405);
            
            strokeWeight(50);
            arc(300, 105, 600, 600, 285, 320);
            arc(300, 90, 600, 600, 335, 345);
            noStroke();
        },
        function(player) {
            fill(240, 255, 190);
            rect(0, 0, 600, 600);
            
            eyes(false, player);
            
            fill(80, 55, 30);
            beginShape();
            vertex(0, 400);
            vertex(300, 500);
            vertex(600, 400);
            vertex(600, 600);
            vertex(0, 600);
            endShape();
            
            fill(200, 0, 0);
            ellipse(300, 500, 80, 80);
            quad(200, 450, 200, 550, 400, 450, 400, 550);
            
            noFill();
            stroke(0, 0, 0);
            strokeWeight(10);
            strokeCap(SQUARE);
            
            fill(210, 195, 125);
            
            pushMatrix();
            translate(Math.abs(player.moveX), player.moveY);
            
            noFill();
            stroke(0, 0, 0);
            arc(300, 280, 80, 270, 20, 160);
            noStroke();
            
            fill(0, 0, 0);
            
            beginShape();
            vertex(355, 85);
            bezierVertex(450, 60, 480, 90, 480, 120);
            bezierVertex(440, 90, 380, 90, 355, 110);
            endShape();
            
            beginShape();
            vertex(245, 85);
            bezierVertex(208, 90, 160, 60, 120, 120);
            bezierVertex(150, 90, 187, 90, 245, 110);
            endShape();
            popMatrix();
            
            noFill();
            stroke(0, 0, 0);
            arc(30, -45, 150, 270, 20, 100);
            arc(90, -45, 150, 270, 20, 100);
            arc(570, -45, 150, 270, 80, 160);
            arc(510, -45, 150, 270, 80, 160);
            noStroke();
        },
        function(player) {
            fill(255, 235, 150);
            rect(0, 0, 600, 600);
            eyes(true, player);
            
            pushMatrix();
            translate(Math.abs(player.moveX), player.moveY);
            
            fill(0, 0, 0);
            beginShape();
            vertex(200, 400);
            bezierVertex(350, 350, 360, 360, 400, 400);
            bezierVertex(360, 370, 330, 380, 200, 400);
            endShape();
            
            fill(195, 165, 80);
            
            beginShape();
            vertex(355, 110);
            bezierVertex(450, 60, 480, 120, 480, 115);
            bezierVertex(440, 90, 380, 120, 355, 125);
            endShape();
            
            beginShape();
            vertex(245, 110);
            bezierVertex(250, 120, 140, 60, 120, 115);
            bezierVertex(160, 90, 180, 120, 245, 125);
            endShape();
            
            popMatrix();
            
            beginShape();
            vertex(-40, -20);
            bezierVertex(100, -200, 500, -200, 640, -20);
            vertex(640, 350);
            vertex(610, 400);
            vertex(580, 350);
            vertex(580, 60);
            vertex(540, 110);
            vertex(500, 60);
            vertex(460, 110);
            vertex(420, 60);
            vertex(380, 110);
            vertex(340, 60);
            vertex(300, 110);
            vertex(260, 60);
            vertex(220, 110);
            vertex(180, 60);
            vertex(140, 110);
            vertex(100, 60);
            vertex(60, 110);
            vertex(20, 60);
            vertex(20, 350);
            vertex(-10, 400);
            vertex(-40, 350);
            endShape();
      
            fill(30, 90, 30);
            
            beginShape();
            vertex(0, 400);
            vertex(200, 500);
            vertex(600, 400);
            vertex(600, 600);
            vertex(0, 600);
            endShape();
            
            stroke(220, 200, 100);
            fill(220, 175, 85);
            ellipse(200, 500, 100, 100);
            pushMatrix();
            translate(150, 480);
            rotate(-45);
            rect(0, 0, 40, 60);
            popMatrix();
            
            noStroke();
        }
    ];

    var displayCharacter = function(num, size, d, player) {
        noStroke();
        pushMatrix();
        translate(player.x, player.y);
        scale(size * 2 / 600, size * 2 / 600);
        if (d === "left") {
            translate(size * 20, 0);
            scale(-1, 1);
        }
        characterDesigns[num](player);
        popMatrix();
    };
    
    var gremxula = function(x, y, size, plusX, plusY) {
        pushMatrix();
        translate(x, y);
        scale(size * 2 / 600, size * 2 / 600);
        fill(75, 180, 75);
        rect(0, 0, 600, 600);
        strokeCap(SQUARE);
        strokeWeight(7);
        stroke(0, 95, 20, 50);
        for (var i = 0; i < 9; i++) {
            line(10  + (i + 1) * 60, 590, 10, 590 - (i + 1) * 57);
        }
        for (var i = 0; i < 10; i++) {
            line(10 + i * 60, 10, 590, 580 - i * 57 - 10);
        }
        pushMatrix();
        translate(600, 0);
        rotate(90);
        for (var i = 0; i < 9; i++) {
            line(10  + (i + 1) * 60, 590, 10, 590 - (i + 1) * 57);
        }
        for (var i = 0; i < 10; i++) {
            line(10 + i * 60, 10, 590, 580 - i * 57 - 10);
        }
        
        noStroke();
        popMatrix();
        
        pushMatrix();
        translate(plusX, plusY);
    
        fill(0, 0, 0);
        arc(300, 450, 300, 300, 181, 360);
        
        fill(255, 255, 255);
        triangle(200, 330, 240, 330, 220, 410);
        triangle(400, 330, 360, 330, 380, 410);
        
        noFill();
        strokeCap(PROJECT);
        strokeWeight(20);
        stroke(0, 0, 0);
        arc(300, 450, 300, 300, 181, 360);
        line(150, 450, 450, 450);
        
        fill(255, 0, 0);
        noStroke();
        arc(200, 200, 100, 100, 20, 200);
        arc(400, 200, 100, 100, -20, 160);
        arc(140, 140, 70, 70, 20, 200);
        arc(460, 140, 70, 70, -20, 160);
        popMatrix();
        
        fill(140, 140, 140);
        beginShape();
        vertex(0, 500);
        vertex(300, 550);
        vertex(600, 500);
        vertex(600, 600);
        vertex(0, 600);
        endShape();
        popMatrix();
    };
    
    var master = function(x, y, size, plusX, plusY) {
        pushMatrix();
        translate(x, y);
        scale(size * 2 / 600, size * 2 / 600);
        fill(75, 180, 75);
        rect(0, 0, 600, 600);
        strokeCap(SQUARE);
        strokeWeight(7);
        stroke(0, 95, 20, 50);
        for (var i = 0; i < 9; i++) {
            line(10  + (i + 1) * 60, 590, 10, 590 - (i + 1) * 57);
        }
        for (var i = 0; i < 10; i++) {
            line(10 + i * 60, 10, 590, 580 - i * 57 - 10);
        }
        
        pushMatrix();
        translate(600, 0);
        rotate(90);
        for (var i = 0; i < 9; i++) {
            line(10  + (i + 1) * 60, 590, 10, 590 - (i + 1) * 57);
        }
        for (var i = 0; i < 10; i++) {
            line(10 + i * 60, 10, 590, 580 - i * 57 - 10);
        }
        noStroke();
        popMatrix();
        
        pushMatrix();
        translate(plusX, plusY);
        fill(0, 0, 0);
        arc(300, 450, 300, 300, 181, 360);
        
        fill(255, 255, 255);
        triangle(200, 330, 240, 330, 220, 410);
        triangle(400, 330, 360, 330, 380, 410);
        triangle(230, 440, 270, 440, 250, 370);
        triangle(370, 440, 330, 440, 350, 370);
        
        noFill();
        strokeCap(PROJECT);
        strokeWeight(20);
        stroke(0, 0, 0);
        arc(300, 450, 300, 300, 181, 360);
        line(150, 450, 450, 450);
        
        fill(255, 0, 0);
        noStroke();
        arc(200, 200, 100, 100, 20, 200);
        arc(400, 200, 100, 100, -20, 160);
        arc(140, 140, 70, 70, 20, 200);
        arc(460, 140, 70, 70, -20, 160);
        arc(230, 160, 70, 70, 20, 200);
        arc(370, 160, 70, 70, -20, 160);
        popMatrix();
        
        fill(0, 0, 0);
        beginShape();
        vertex(0, 500);
        vertex(300, 550);
        vertex(600, 500);
        vertex(600, 600);
        vertex(0, 600);
        endShape();
        
        fill(185, 155, 30);
        beginShape();
        vertex(120, 0);
        vertex(200, 0);
        bezierVertex(180, -15, 160, -40, 180, -100);
        bezierVertex(110, -50, 130, -40, 120, 0);
        endShape();
        
        beginShape();
        vertex(480, 0);
        vertex(400, 0);
        bezierVertex(440, -40, 420, -15, 420, -100);
        bezierVertex(470, -40, 490, -50, 480, 0);
        endShape();
        popMatrix();
    };
}

/** Logos **/
{
    var logo1 = {x : -490, y : 250, moveX : 40, moveY : 0, gravity : -10};
    var logo2 = {x : 240, y : 750, moveX : 0, moveY : -40, gravity : -10};
    var logoTime = 0;

    var cornerLogo = function(x, y, size) {
        noStroke();
    
        fill(255, 255, 255);
        pushMatrix();
        translate(x, y);
        scale(size / 600, size / 600);
        beginShape();
        vertex(-270, 20);
        bezierVertex(-600, 250, -700, 600, -50, 600);
        vertex(-125, 400);
        vertex(-255, 480);
        bezierVertex(-305, 430, -395, 280, -205, 180);
        endShape();
        beginShape();
        vertex(270, 20);
        bezierVertex(600, 250, 700, 600, 50, 600);
        vertex(125, 400);
        vertex(255, 480);
        bezierVertex(305, 430, 395, 280, 205, 180);
        endShape();
        arc(0, 600, 1200, 1300, 249, 291);
        popMatrix();
    };
    
    var logoSection = function(x, y, color) {
        fill(color);
        pushMatrix();
        translate(x, y);
        pushMatrix();
        translate(logo1.x + 210, 150);
        scale(0.15, 0.15);
        beginShape();
        vertex(-270, 20);
        bezierVertex(-600, 250, -700, 600, -50, 600);
        vertex(-125, 400);
        vertex(-255, 480);
        bezierVertex(-305, 430, -395, 280, -205, 180);
        endShape();
        popMatrix();
        pushMatrix();
        translate(230, logo2.y - 110);
        scale(0.15, 0.15);
        beginShape();
        vertex(-270, 20);
        bezierVertex(-600, 250, -700, 600, -50, 600);
        vertex(-125, 400);
        vertex(-255, 480);
        bezierVertex(-305, 430, -395, 280, -205, 180);
        endShape();
        popMatrix();
        text(" reen", logo1.x + 290, 200);
        text(" host", 300, logo2.y - 60);
        popMatrix();
    };
    
    var logo = function() {
        background(255, 255, 255);
        pushMatrix();
        translate(logo1.x, logo1.y - 100);
        scale(0.2, 0.2);
        characterDesigns[0](logo1);
        popMatrix();
        pushMatrix();
        translate(logo2.x, logo2.y);
        scale(0.2, 0.2);
        characterDesigns[3](logo2);
        popMatrix();
        if (logo1.x < 10) {
            logo1.x += 5;
        } else if (logo2.y > 380) {
            logo2.y -= 15;
        }
        
        logo1.y += logo1.gravity;
        logo1.gravity += 1;
        if (logo1.y > 250) {
            logo1.gravity = -10;
            if (logo1.x >= 10) {
                logo1.y = 250;
                logo1.gravity = 0;
            }
        }
        textFont(f3, 100);
        textAlign(CENTER, CENTER);
        logoSection(5, 5, color(0, 0, 0, 100));
        logoSection(0, 0, color(0, 200, 0));
    };
}

/** Image loading **/
{
    var loading = true;
    
    var continueB = {
        x : 200,
        y : 400,
        w : 200,
        h : 100,
        display : function() {
            strokeWeight(8);
            stroke(50, 150, 255);
            if (mouseX > this.x && mouseX < this.x + this.w && mouseY > this.y && mouseY < this.y + this.h) {
                stroke(100, 200, 255);
                cursor("pointer");
                if (click) {
                    loading = false;
                }
            }
            fill(255, 255, 255);
            rect(this.x, this.y, this.w, this.h, 5);
            fill(0, 0, 0);
            textFont(f2, 35);
            text("Continue", this.x + this.w / 2, this.y + this.h / 2);
        }
    };
    
    // Random fact generator
    var randomFacts = [
        "Hanging an anvil on the wall is a bad idea.",
        "Pigs don't fly.",
        "It is currently " + year() + ".",
        "People say \"Ow!\" when they get hurt.",
        "You can't use a blanket to fly."
    ];
    
    var randomFact = randomFacts[floor(random(randomFacts.length))];
    
    var points = [
        {x : 16, y : 293},
        {x : 32, y : 230},
        {x : 54, y : 187},
        {x : 56, y : 165},
        {x : 54, y : 139},
        {x : 48, y : 95},
        {x : 48, y : 77},
        {x : 48, y : 61},
        {x : 58, y : 38},
        {x : 69, y : 33},
        {x : 74, y : 33},
        {x : 80, y : 36},
        {x : 83, y : 42},
        {x : 83, y : 53},
        {x : 85, y : 56},
        {x : 86, y : 64},
        {x : 95, y : 63},
        {x : 95, y : 64},
        {x : 98, y : 66},
        {x : 98, y : 72},
        {x : 98, y : 85},
        {x : 98, y : 96},
        {x : 96, y : 109},
        {x : 86, y : 124},
        {x : 86, y : 139},
        {x : 84, y : 165},
        {x : 89, y : 178},
        {x : 99, y : 188},
        {x : 117, y : 193},
        {x : 127, y : 189},
        {x : 139, y : 174},
        {x : 139, y : 160},
        {x : 142, y : 154},
        {x : 144, y : 146},
        {x : 155, y : 134},
        {x : 162, y : 134},
        {x : 163, y : 143},
        {x : 165, y : 152},
        {x : 165, y : 169},
        {x : 167, y : 182},
        {x : 174, y : 195},
        {x : 180, y : 201},
        {x : 185, y : 209},
        {x : 188, y : 223},
        {x : 188, y : 231}
    ];
    
    var sandColor = [
        1694498815, 
        1694498815, 
        1694498815, 
        1692985576, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694367229, 
        1691735509, 
        1691867095, 
        1694498815, 
        1694498815, 
        1691472337, 
        1693709299, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1693117162, 
        1693182955, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1692064474, 
        1694498815, 
        1691867095, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1692196060, 
        1694498815, 
        1692590818, 
        1693840885, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1692788197, 
        1692853990, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1692590818, 
        1694498815, 
        1692853990, 
        1694498815, 
        1694498815, 
        1694498815, 
        1692525025, 
        1691867095, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1690353856, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1691340751, 
        1691209165, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1693906678, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1694498815, 
        1692788197, 
        1694104057, 
        1694498815, 
        1693709299, 
        1691538130, 
        1694498815, 
        1692393439, 
        1690682821, 
        1691669716, 
        1694498815, 
        1693840885, 
        1692919783, 
        1693314541
    ];
    
    var linePoints = [
        [
            [140, 12],
            [140, 150],
            [200, 150]
        ],
        [
            [250, 10],
            [250, 150],
            [200, 200]
        ],
        [
            [250, 390],
            [250, 250],
            [320, 200]
        ],
        [
            [200, 395],
            [200, 250],
            [150, 250]
        ],
        [
            [5, 200],
            [80, 200],
            [80, 250]
        ],
        [
            [50, 200],
            [50, 150],
            [100, 100]
        ],
        [
            [370, 100],
            [300, 150]
        ],
        [
            [70, 350],
            [100, 300],
            [160, 300]
        ]
    ];
    
    var loadStr = "";
    
    var images = [];
    
    var galaxy = [];
    
    var curImg = 0, realImg, planetImg, highlightImg, maskImg, blockImg, sandImg, springImg, blobImg, crateImg, mistImg, darkImg, asteroidImg, robotImg, oldImg, forestImg;
    
    var graphics = [
        {
            display : function() {
                noStroke();
                this.y = 0.0;
                for (var i = 0; i < this.width; i++) {
                    this.n = noise(this.x, this.y);
                    this.m = map(this.n, 0, 1, 0, 355);
                    fill(this.m - 100, this.m - 160, this.m - 200, 150);
                    rect(i, this.pixY, 1, 1);
                    this.y += 0.02;
                    
                }
                this.x += 0.02;
                this.pixY ++;
            },
            n : 0,
            m : 0,
            x : 0.0,
            y : 0.0,
            pixY : 0,
            width : 400,
            height : 400,
            end : 400
        },
        {
            display : function() {
                fill(255, 255, 255, 6 - this.pixY / 8);
                ellipse(200 + this.pixY, 200 - this.pixY, 400 - this.pixY * 10, 400 - this.pixY * 10);
                this.pixY ++;
            },
            width : 400,
            height : 400,
            pixY : 0,
            end : 50
        },
        {
            display : function() {
                background(255, 255, 255, 0);
                fill(255, 255, 255);
                ellipse(200, 200, 400, 400);
            }, 
            width : 400,
            height : 400
        },
        {
            display : function() {
                noStroke();
                fill(87, 78, 70);
                rect(0, 0, blockSize * 2, blockSize * 2);
                fill(150, 150, 150);
                rect(0, 0, blockSize * 1.5, blockSize / 2);
                rect(0, 0, blockSize / 3, blockSize * 1.6);
                pushMatrix();
                fill(99, 91, 79);
                translate(blockSize * 1.5, 0);
                rotate(45);
                rect(0, 0, blockSize, blockSize * 2);
                popMatrix();
                fill(77, 56, 42);
            },
            width : blockSize * 2,
            height : blockSize * 2
        },
        {
            display : function() {
                for (var i = 0; i < 10; i++) {
                    fill(sandColor[i + this.y * 10]);
                    rect(i * 10, this.y * 10, 10, 10);
                }
                this.y ++;
            },
            y : 0,
            width : 100,
            height : 100,
        },
        {
            display : function() {
                background(255, 255, 255, 0);
                fill(170, 170, 170);
                rect(0, 0, blockSize * 2, blockSize / 3);
                pushMatrix();
                for (var i = 0; i < 4; i++) {
                    fill(170 - i * 15, 170 - i * 15, 170 - i * 15);
                    translate(0, blockSize / 2);
                    rotate(-10);
                    rect(0, 0, blockSize * 2, blockSize / 3);
                    rotate(10);
                }
                popMatrix();
            },
            width : blockSize * 2,
            height : blockSize * 2
        },
        {
            display : function() {
                background(255, 255, 255, 0);
                noStroke();
                fill(0, 255, 0);
                ellipse(100, 265, 200, 200);
                beginShape();
                for (var i = 0; i < points.length; i++) {
                    vertex(points[i].x - 15, points[i].y - 33);
                }
                endShape();
            },
            width : 200,
            height : 365
        },
        {
            display : function() {
                if (this.curLine === 0) {
                    fill(130, 85, 15);
                    rect(0, 0, 200, 200);
                }
                strokeWeight(7);
                stroke(0, 0, 0, 100);
                strokeCap(ROUND);
                line(this.curLine * 30 + 30, 0, this.curLine * 30, 200);
                this.curLine ++;
            },
            width : 200,
            height : 200,
            curLine : 0
        },
        {
            display : function() {
                noStroke();
                this.y = 0.0;
                for (var i = 0; i < this.width; i++) {
                    this.n = noise(this.x, this.y);
                    this.m = map(this.n, 1, 10, 0.8, 255);
                    fill(this.m * 19 + 400, this.m * 19 + 350, this.m * 19 + 380, 255);
                    rect(i, this.pixY, 1, 1);
                    this.y += 0.01;
                    
                }
                this.x += 0.03;
                this.pixY ++;
            },
            n : 0,
            m : 0,
            x : 0.0,
            y : 0.0,
            pixY : 0,
            width : 400,
            height : 400,
            end : 400
        },
        {
            display : function() {
                fill(55, 55, 60);
                ellipse(200, 200, 400, 400);
            
                fill(0, 0, 0);
                beginShape();
                vertex(0, 200);
                bezierVertex(0, 200 + cos(-60) * 400, 0 + sin(30) * 400, 200 + cos(-60) * 400, 200, 400);
                vertex(200, 300);
                vertex(165, 350);
                vertex(140, 170);
                vertex(100, 310);
                vertex(80, 170);
                vertex(40, 260);
                endShape();
            },
            width : 400,
            height : 400
        },
        {
            display : function() {
                noStroke();
                fill(100, 100, 100);
                ellipse(180, 150, 300, 300);
                quad(0, 120, 0, 180, 100, 250, 100, 50);
                pushMatrix();
                translate(180, 150);
                rotate(145);
                quad(-180, -30, -180, 30, -80, 100, -80, -100);
                rotate(145);
                quad(-180, -30, -180, 30, -80, 100, -80, -100);
                popMatrix();
                
                fill(70, 70, 70);
                ellipse(100, 100, 70, 70);
                ellipse(160, 200, 90, 90);
                ellipse(240, 110, 60, 60);
            },
            width : 360,
            height : 360
        },
        {
            display : function() {
                fill(115, 115, 115);
                ellipse(200, 200, 400, 400);
                stroke(255, 30, 0);
                strokeWeight(6);
                for (var i = 0; i < linePoints.length; i++) {
                    beginShape();
                    for (var j = 0; j < linePoints[i].length; j++) {
                        vertex(linePoints[i][j][0], linePoints[i][j][1]);
                    }
                    endShape();
                    ellipse(linePoints[i][j - 1][0], linePoints[i][j - 1][1], 20, 20);
                }
            },
            width : 400,
            height : 400
        },
        {
            display : function() {
                noStroke();
                this.y = 0.0;
                for (var i = 0; i < this.width; i++) {
                    this.n = noise(this.x, this.y);
                    this.m = map(this.n, 0, 1, 0, 355);
                    fill(this.m - 185, this.m - 50, this.m - 200, 150);
                    rect(i, this.pixY, 1, 1);
                    this.y += 0.02;
                    
                }
                this.x += 0.02;
                this.pixY ++;
            },
            n : 0,
            m : 0,
            x : 0.0,
            y : 0.0,
            pixY : 0,
            width : 400,
            height : 400,
            end : 400
        },
        {
            display : function() {
                noStroke();
                this.y = 0.0;
                for (var i = 0; i < this.width; i++) {
                    this.n = noise(this.x, this.y);
                    this.m = map(this.n, 0, 1, 0, 355);
                    if (this.m > 160) {
                        fill(20, 25, 170);
                    } else {
                        fill(this.m - 185, this.m - 50, this.m - 100, 255);
                    }
                    rect(i, this.pixY, 1, 1);
                    this.y += 0.01;
                    
                }
                this.x += 0.01;
                this.pixY ++;
            },
            n : 0,
            m : 0,
            x : 0.0,
            y : 0.0,
            pixY : 0,
            width : 400,
            height : 400,
            end : 400
        }
    ];
    
    var loadGraphics = function() {
        frameRate(120);
        realImg = graphics[curImg];
        if (curImg < 2 || curImg === 8 || (curImg > 11 && curImg < 14)) {
            if (realImg.pixY < realImg.end) {
                realImg.display();
            } else {
                images.push(get(0, 0, realImg.width, realImg.height));
                curImg ++;
                background(255, 255, 255, 0);
            }
        } else if (curImg > 1 && curImg < 4 || curImg === 5 || curImg === 6 || (curImg > 8 && curImg < 12)) {
            realImg.display();
            images.push(get(0, 0, realImg.width, realImg.height));
            
            curImg ++;
            background(255, 255, 255, 0);
        } else if (curImg === 4) {
            if (realImg.y * 10 >= realImg.height) {
                images.push(get(0, 0, realImg.width, realImg.height));
                curImg ++;
            } else {
                realImg.display();
            }
        } else if (curImg === 7) {
            realImg.display();
            if (realImg.curLine > 7) {
                images.push(get(0, 0, realImg.width, realImg.height));
                curImg++;
                background(255, 255, 255);
            }
        }
        noStroke();
        fill(255, 255, 255);
        rect(0, 410, 600, 190);
        fill(0, 0, 0);
        textFont(f2, 100);
        text("Loading" + loadStr, 300, 500);
        textSize(20);
        text("Fun Fact: " + randomFact, 300, 580);
        if (frameCount % 20 === 0) {
            loadStr += ".";
        }
        loadStr = loadStr.length > 3 ? "" : loadStr;
        
        if (curImg >= graphics.length) {
            background(255, 255, 255);
            planetImg = images[0];
            highlightImg = images[1];
            maskImg = images[2];
            blockImg = images[3];
            sandImg = images[4];
            springImg = images[5];
            blobImg = images[6];
            crateImg = images[7];
            mistImg = images[8];
            darkImg = images[9];
            asteroidImg = images[10];
            robotImg = images[11];
            oldImg = images[12];
            forestImg = images[13];
            planetImg.mask(maskImg);
            mistImg.mask(maskImg);
            oldImg.mask(maskImg);
            forestImg.mask(maskImg);
            galaxy = [planetImg, mistImg, darkImg, robotImg, forestImg];
            continueB.display();
            frameRate(60);
        }
    };
}

/** Graphic functions **/
{
    var gradient = function() {
        noStroke();
        for (var i = 0; i < height / 2; i++) {
            color1 = color(
                sin(frameCount - 330) * 128 + 150,
                sin(frameCount - 270) * 128 + 150, 
                sin(frameCount - 210) * 128 + 150
            );
            color2 = color(
                sin(frameCount - 60) * 128 + 150,
                sin(frameCount) * 128 + 150, 
                sin(frameCount + 60) * 128 + 150
            );
            color3 = lerpColor(color1, color2, i / 300);
            fill(color3);
            rect(0, i * 2, width, 2);
        }
    };
    
    var glow = function(color) {
        for (var i = 0; i < 8; i++) {
            fill(red(color), green(color) + i * 2, blue(color) + i * 10, 15);
            ellipse(0, 0, 480 - i * 10, 480 - i * 10);
        }
    };
    
    var planet = function(i) {
        image(i, -200, -200);
        fill(0, 0, 0, 50);
        ellipse(0, 0, 400, 400);
        image(highlightImg, -200, -200);
    };
    
    var moon = function() {
        pushMatrix();
        translate(sin(r2 * 5) * 300, 0);
        scale(1.5 + sin((r2 + 54) * 5), 1.5 + sin((r2 + 54) * 5));
        fill(150, 150, 150, 80);
        ellipse(0, 0, 80, 80);
        
        fill(80, 80, 80);
        ellipse(0, 0, 70, 70);
        
        fill(60, 60, 60);
        
        ellipse(-20, -3, 20, 20);
        ellipse(-9, 5, 15, 15);
        ellipse(18, -9, 13, 13);
        ellipse(6, 22, 17, 17);
        
        image(highlightImg, -35, -35, 70, 70);
        popMatrix();
    };
    
    var Galaxy = function(size) {
        pushMatrix();
        translate(300, 300);
        scale(1 + size / 700, 1 + size / 700);
        for (var i = 0; i < 15; i++) {
            fill(255, 255, 255, 25);
            ellipse(0, 0, 200 - i * 10, 200 - i * 10);
            fill(255, 255, 255, 10 + i);
            pushMatrix();
            rotate(-20);
            ellipse(0, 0, 400 - i * 5, 130 - i * 5);
            popMatrix();
        }
        popMatrix();    
    };
    
    var showStars = function() {
        for (var i = 0; i < stars.length; i++) {
            twinkle = random(190, 255);
            fill(twinkle, twinkle, twinkle);
            ellipse(stars[i].x, stars[i].y, stars[i].size, stars[i].size);
        }
    };
    
    var showSparkles = function() {
        for (var i = 0; i < sparkles.length; i++) {
            sparkles[i].display();
            sparkles[i].move();
        }
    };
    
    var pipe = function(x, y, w, h, c) {
        fill(c, c, c);
        rect(x, y, w, h);
        fill(170, 170, 170);
        rect(x - w / 8, y, w * 5 / 4, h / 10);
    };
    
    var flip = function() {
        if (floor(sin(r * 5) * 200) < -199) {
            front = false;
        }
        if (floor(sin(r * 5) * 200) > 198) {
            front = true;
        }
    };
    
    var flip2 = function() {
        if (floor(sin(r2 * 5) * 200) < -199) {
            front2 = false;
        }
        if (floor(sin(r2 * 5) * 200) > 198) {
            front2 = true;
        }
    };
    
    var lock = function(x, y) {
        rect(x - 25, y - 15, 50, 50);
        arc(x, y - 15, 40, 40, 181, 360);
        fill(90, 90, 100);
        arc(x, y - 15, 20, 20, 181, 360);
        ellipse(x, y + 3, 15, 15);
        rect(x - 3, y + 9, 6, 10);
    };
    
    var spaceship = function(x, y, r, size, fire) {
        noStroke();
        pushMatrix();
        translate(x, y);
        scale(size / 400, size / 400);
        rotate(r);
        fill(150, 150, 150);
        beginShape();
        vertex(0, 200);
        vertex(200, 200);
        vertex(100, 150);
        bezierVertex(100, 150, 100, 0, 0, -200);
        bezierVertex(-100, 0, -100, 150, -100, 150);
        vertex(-200, 200);
        endShape();
        fill(130, 200, 255);
        beginShape();
        vertex(-60, 120);
        vertex(60, 120);
        bezierVertex(50, 100, 50, 0, 0, -40);
        bezierVertex(-50, 0, -50, 100, -60, 120);
        endShape();
        if (fire) {
            flame = random(-30, 30);
            fill(255, 130, 0);
            beginShape();
            vertex(-70, 200);
            vertex(70, 200);
            vertex(r, 400 + flame);
            endShape();
            fill(255, 255, 0);
            beginShape();
            vertex(-30, 200);
            vertex(30, 200);
            vertex(r, 300 + flame);
            endShape();
        }
        popMatrix();
    };
    
    var spaceship2 = function(x, y, r, size) {
        noStroke();
        pushMatrix();
        translate(x, y);
        scale(size / 400, size / 400);
        rotate(r);
        fill(150, 150, 150);
        beginShape();
        vertex(100, 250);
        vertex(200, 300);
        vertex(100, 150);
        vertex(100, -400);
        bezierVertex(-100, 0, -100, 150, -100, 150);
        vertex(-100, 250);
        endShape();
        fill(130, 200, 255);
        beginShape();
        vertex(-97, 120);
        vertex(0, 120);
        vertex(12, -210);
        bezierVertex(-50, -70, -80, 30, -97, 120);
        endShape();
        popMatrix();
    };
    
    var spaceship3 = function(x, y, r, size, fire, s) {
        noStroke();
        pushMatrix();
        translate(x, y);
        scale(size / 400, size / 400 + s);
        rotate(r);
        fill(150, 150, 150);
        beginShape();
        vertex(0, 200);
        vertex(200, 200);
        vertex(100, 150);
        bezierVertex(100, 150, 100, 0, 0, -200);
        bezierVertex(-100, 0, -100, 150, -100, 150);
        vertex(-200, 200);
        endShape();
        fill(130, 200, 255);
        beginShape();
        vertex(-80, 125);
        vertex(45, 125);
        bezierVertex(10, 30, 40, 51, -30, -40);
        bezierVertex(-75, 0, -85, 100, -80, 125);
        endShape();
        if (fire) {
            fill(255, 130, 0);
            beginShape();
            vertex(-70, 200);
            vertex(70, 200);
            vertex(0, 400);
            endShape();
            fill(255, 255, 0);
            beginShape();
            vertex(-30, 200);
            vertex(30, 200);
            vertex(0, 300);
            endShape();
        }
        popMatrix();
    };
    
    var specialText = function(t, x, y, textSize) {
        textFont(f2, textSize);
        fill(255, 255, 255, 100);
        text(t, x - 5, y - 5);
        fill(0, 0, 0);
        text(t, x + 5, y + 5);
        fill(255, 255, 255);
        text(t, x, y);
    };
    
    var gun = function(x, y, size, r) {
        pushMatrix();
        translate(x, y);
        scale(size / 600, size / 600);
        rotate(r);
        fill(0, 0, 0);
        beginShape();
        vertex(40, 200);
        vertex(-100, 600);
        vertex(-400, 600);
        vertex(-200, 0);
        vertex(600, 0);
        vertex(600, 200);
        endShape();
        noFill();
        stroke(0, 0, 0);
        strokeWeight(30);
        arc(-5, 200, 350, 300, 0, 90);
        arc(100, 200, 100, 100, 90, 180);
        noStroke();
        fill(100, 100, 100);
        beginShape();
        vertex(-400, 550);
        vertex(-130, 550);
        vertex(-100, 500);
        vertex(-40, 500);
        vertex(-80, 600);
        vertex(-420, 600);
        endShape();
        rect(60, -20, 500, 40);
        popMatrix();
    };
 
    var Box = function(x, y, size) {
        pushMatrix();
        translate(x, y);
        scale(size / 300);
        fill(0, 0, 0, 100);
        rect(5, 5, 300, 300);
        fill(255, 220, 0);
        rect(0, 0, 300, 300);
        fill(255, 200, 0);
        rect(25, 25, 250, 250);
        textFont(f2);
        textAlign(CENTER, CENTER);
        specialText("?", 150, 150, 200);
        popMatrix();
    };

    var Background = function() {
        background(215, 195, 170);
        
        noStroke();
        fill(200, 150, 210);
        ellipse(450, 90, 100, 100);
        
        fill(215, 195, 170);
        ellipse(470, 80, 100, 100);
        
        fill(200, 150, 210);
        ellipse(435, 105, 150, 20);
        ellipse(105, 75, 150, 20);
        ellipse(15, 125, 150, 20);
        
        fill(110, 110, 110);
        
        rect(-100, 300, 100, 600);
        rect(600, 300, 100, 600);
        
        rect(0, 400, 600, 500);
        rect(0, 200, 200, 200);
        rect(250, 250, 100, 150);
        rect(450, 220, 150, 180);
        
        pipe(30, 120, 30, 80, 110);
        pipe(130, 100, 30, 100, 110);
        pipe(80, 150, 20, 50, 110);
        
        pipe(255, 200, 20, 50, 110);
        
        pipe(460, 150, 50, 70, 110);
        pipe(535, 120, 45, 100, 110);
    };
        
    var Background2 = function() {
        background(40, 40, 40);
        fill(60, 60, 60);
        quad(0, 0, 600, -200, 600, 600, 0, 600);
        fill(40, 40, 40);
        rect(0, 400, 600, 200);
        rect(400, 350, 50, 50);
        rect(460, 350, 50, 50);
        rect(430, 300, 50, 50);
        rect(0, 390, 280, 10);
        ellipse(100, 382, 20, 20);
        ellipse(180, 382, 20, 20);
        quad(80, 375, 200, 375, 220, 310, 60, 310);
        ellipse(150, 160, 15, 15);
        noFill();
        stroke(40, 40, 40);
        strokeWeight(7);
        strokeCap(SQUARE);
        line(150, -50, 150, 160);
        arc(150, 210, 100, 100, 150, 270);
        arc(150, 210, 35, 100, 150, 270);
        arc(150, 210, 90, 100, 270, 390);
        noStroke();
        fill(80, 80, 80);
        rect(0, 500, 600, 150);
        fill(200, 200, 0);
        rect(0, 500, 600, 15);
        fill(0, 0, 0);
        for (var i = 0; i < 40; i++) {
            quad(i * 40, 500, i * 40 + 20, 500, i * 40 + 10, 515, i * 40 - 10, 515);
        }
    };
    
    var Background3 = function() {
        background(255, 255, 255);
        gradient();
        fill(0, 0, 0, 50);
        
        beginShape();
        vertex(0, 400);
        vertex(0, 600);
        vertex(600, 600);
        vertex(600, 400);
        bezierVertex(500, 300, 300, 300, 0, 400);
        endShape();
    };
    
    var Background4 = function() {
        for (var i = 0; i < height / 2; i++) {
            fill(55, 65, 105);
            fill(lerpColor(color(55, 65, 105), color(115, 115, 130), i / 180));
            rect(0, i * 2, width, 2);
        }
    };
    
    var Background5 = function() {
        noStroke();
        for (var i = 0; i < height / 2; i++) {
            fill(55, 65, 105);
            fill(lerpColor(color(55, 65, 105), color(115, 115, 130), i / 180));
            rect(0, i * 2, width, 2);
        }
        
        fill(125, 90, 130);
        ellipse(435, 205, 150, 20);
        ellipse(105, 175, 150, 20);
        ellipse(15, 125, 150, 20);
        
        fill(40, 40, 40);
        
        rect(-100, 300, 100, 600);
        rect(600, 300, 100, 600);
        
        rect(0, 400, 600, 500);
        rect(0, 200, 200, 200);
        rect(250, 250, 100, 150);
        rect(450, 220, 150, 180);
        
        pipe(30, 120, 30, 80, 40);
        pipe(130, 100, 30, 100, 40);
        pipe(80, 150, 20, 50, 40);
        
        pipe(255, 200, 20, 50, 40);
        
        pipe(460, 150, 50, 70, 40);
        pipe(535, 120, 45, 100, 40);
    };
    
    var header = function(txt, amount, size) {
        textAlign(CENTER, CENTER);
        fill(100, 100, 100, constrain(amount / 2, 0, 50));
        textFont(f2, size);
        for (var i = 0; i < 30; i++) {
            text(txt, 300 + sin(i * 12) * 10, 100 + cos(i * 12) * 10);
        }
        fill(255, 255, 255, amount);
        text(txt, 300, 100);
    };
}

/** Buttons **/
{
    var Button = function(x, y, toX, toY, graphic, sceneTo, txt, toSize) {
        this.x = x;
        this.y = y;
        this.toX = toX;
        this.toY = toY;
        this.graphic = graphic;
        this.sceneTo = sceneTo;
        this.fade = 0;
        this.size = 20;
        this.toSize = toSize;
        this.txt = txt;
    };
    
    Button.prototype.display = function() {
        if (this.check()) {
            stroke(255, 255, 255, 60);
            for (var i = 0; i < 4; i++) {
                strokeWeight((i + 1) * 5);
                ellipse(this.x, this.y, this.size, this.size);
            }
        }
        noStroke();
        fill(90, 90, 100);
        ellipse(this.x, this.y, this.size, this.size);
        noStroke();
        fill(255, 255, 255, this.fade);
        this.graphic(this.x, this.y);
        if (this.check()) {
            textFont(f, 30);
            fill(255, 255, 255);
            text(this.txt, this.x, this.y - this.toSize / 5 * 3.5);
        }
    };
    
    Button.prototype.move = function() {
        this.size += (this.toSize - this.size) / 20;
        this.x += (this.toX - this.x) / 20;
        this.y += (this.toY - this.y) / 20;
        if (Math.ceil(this.size) > this.toSize - 10) {
            this.fade += 5;
        }
    };
    
    Button.prototype.check = function() {
        return dist(mouseX, mouseY, this.x, this.y) <= this.size / 2;
    };
    
    Button.prototype.pack = function() {
        this.display();
        this.move();
        if (this.check()) {
            cursor("pointer");
            targetX = this.x;
            targetY = this.y;
            if (click) {
                if (typeof this.sceneTo === "string") {
                    if (this.sceneTo === "save") {
                        println("var saveCode = [\n    " + curCharacter + ", " + ((scramble ^ unlocked) * 2) + ", " + (scramble + 1) + "\n];");
                    } else {
                        if (scene === "part1") {
                            newLevel();
                        } else if (scene === "part2") {
                            newClimb();
                        } else if (scene === "part3") {
                            newFight();
                        } else if (scene === "part4") {
                            newFly();
                        }
                        if (scene === "inter2") {
                            scene = "part3";
                        } else {
                            if (this.sceneTo.startsWith("part")) {
                                if (Number(this.sceneTo[this.sceneTo.length - 1]) - 1 <= unlocked) {
                                    scene = this.sceneTo;
                                    flash.reset();
                                }
                            } else if (this.sceneTo === "inter1") {
                                if (unlocked > 1) {
                                    scene = this.sceneTo;
                                    flash.reset();
                                }
                            } else {
                                scene = this.sceneTo;
                                flash.reset();
                            }
                        }
                        
                        innerScene = 0;
                    }
                } else {
                    if (scene === "planets") {
                        curPlanet += this.sceneTo;
                    } else {
                        innerScene += this.sceneTo;
                    }
                    if (innerScene > names.length - 1) {
                        innerScene = 0;
                    }
                    if (innerScene < 0) {
                        innerScene = names.length - 1;
                    }
                    if (curPlanet > planetNames.length - 1) {
                        curPlanet = 0;
                    }
                    if (curPlanet < 0) {
                        curPlanet = planetNames.length - 1;
                    }
                }
            }
        }
    };
    
    var playB = new Button(300, 300, 300, 300, function(x, y) {
        beginShape();
        for (var i = 0; i < 3; i++) {
            vertex(x + sin(i * 120 + 90) * 50, y + cos(i * 120 + 90) * 50);
        }
        endShape();
    }, "levelSelect", "Play", 150);
    
    var storyB = new Button(300, 300, 160, 400, function(x, y) {
        beginShape();
        vertex(x, y - 10);
        vertex(x + 32, y - 30);
        vertex(x + 42, y + 10);
        vertex(x + 10, y + 30);
        vertex(x - 30, y + 20);
        vertex(x - 40, y - 20);
        endShape();
    }, "story", "Story", 150);
    
    var skinB = new Button(300, 300, 440, 400, function(x, y) {
        rect(x - 25, y - 25, 50, 50);
        fill(90, 90, 100, this.fade);
        rect(x - 15, y - 10, 10, 10);
        rect(x + 5, y - 10, 10, 10);
    }, "skins", "Skins", 150);
    
    var mapB = new Button(300, 300, 300, 500, function(x, y) {
        ellipse(x, y, 50, 50);
        ellipse(x - 31, y - 31, 15, 15);
        strokeWeight(4);
        noFill();
        strokeCap(SQUARE);
        stroke(255, 255, 255, this.fade);
        arc(x, y, 90, 90, 241, 570);
        noStroke();
    }, "planets", "Planets", 150);
    
    var backB = new Button(75, 90, 75, 90, function(x, y) {
        beginShape();
        for (var i = 0; i < 3; i++) {
            vertex(x + sin(i * 120 - 90) * 30 - 15, y + cos(i * 120 - 90) * 30);
        }
        rect(x, y - 10, 50, 20);
        endShape();
    }, "menu", "Back", 110);
    
    var backB2 = new Button(75, 525, 75, 525, function(x, y) {
        beginShape();
        for (var i = 0; i < 3; i++) {
            vertex(x + sin(i * 120 - 90) * 30 - 15, y + cos(i * 120 - 90) * 30);
        }
        rect(x, y - 10, 50, 20);
        endShape();
    }, "menu", "Back", 110);
    
    var forwardB = new Button(500, 300, 500, 300, function(x, y) {
        beginShape();
        for (var i = 0; i < 3; i++) {
            vertex(x + sin(i * 120 + 90) * 30 + 20, y + cos(i * 120 - 90) * 30);
        }
        endShape();
        rect(x - 45, y - 10, 50, 20);
    }, 1, "Next", 150);

    var previousB = new Button(100, 300, 100, 300, function(x, y) {
        beginShape();
        for (var i = 0; i < 3; i++) {
            vertex(x + sin(i * 120 - 90) * 30 - 20, y + cos(i * 120 + 90) * 30);
        }
        endShape();
        rect(x - 5, y - 10, 50, 20);
}, -1, "Previous", 150);

    var levelOneB = new Button(300, 300, 300, 230, function(x, y) {
        textFont(f2, 100);
        text("1", x, y);
    }, "part1", "Part One", 150);
    
    var levelTwoB = new Button(300, 300, 180, 350, function(x, y) {
        if (unlocked > 0) {
            textFont(f2, 100);
            text("2", x, y);
        } else {
            lock(x, y);
        }
    }, "part2", "Part Two", 150);
    
    var levelThreeB = new Button(300, 300, 420, 350, function(x, y) {
        if (unlocked > 1) {
            textFont(f2, 100);
            text("3", x, y);
        } else {
            lock(x, y);
        }
    }, "inter1", "Part Three", 150);
    
    var levelFourB = new Button(300, 300, 300, 470, function(x, y) {
            if (unlocked > 2) {
            textFont(f2, 100);
            text("4", x, y);
        } else {
            lock(x, y);
        }
    }, "part4", "Part Four", 150);
    
    var continueGameB = new Button(500, 500, 500, 500, function(x, y) {
        beginShape();
        for (var i = 0; i < 3; i++) {
            vertex(x + sin(i * 120 + 90) * 30 + 20, y + cos(i * 120 - 90) * 30);
        }
        endShape();
        rect(x - 45, y - 10, 50, 20);
    }, "game" + scene[4], "Continue", 120);
    
    var saveB = new Button(50, 70, 50, 70, function(x, y) {
        pushMatrix();
        translate(x, y);
        scale(0.9, 0.9);
        rect(-25, -25, 50, 50, 4);
        fill(90, 90, 100);
        if (this.size > 70) {
            triangle(14, -26, 26, -26, 26, -16);
            rect(-15, -20, 30, 15, 4);
            rect(-20, 0, 40, 20, 4);
        }
        fill(255, 255, 255, this.fade);
        rect(5, -17, 5, 9);
        popMatrix();
    }, "save", "Save", 80);
    
    var forwardBP = new Button(510, 530, 510, 530, function(x, y) {
        beginShape();
        for (var i = 0; i < 3; i++) {
            vertex(x + sin(i * 120 + 90) * 30 + 20, y + cos(i * 120 - 90) * 30);
        }
        endShape();
        rect(x - 45, y - 10, 50, 20);
    }, 1, "Next", 130);

    var previousBP = new Button(90, 530, 90, 530, function(x, y) {
        beginShape();
        for (var i = 0; i < 3; i++) {
            vertex(x + sin(i * 120 - 90) * 30 - 20, y + cos(i * 120 + 90) * 30);
        }
        endShape();
        rect(x - 5, y - 10, 50, 20);
}, -1, "Previous", 130);

    var selectB = {
        x : 200,
        y : 520,
        w : 200,
        h : 70,
        display : function() {
            strokeWeight(3);
            if (mouseX > this.x && mouseX < this.x + this.w && mouseY > this.y && mouseY < this.y + this.h) {
                stroke(255, 255, 255, 60);
                for (var i = 0; i < 4; i++) {
                    strokeWeight((i + 1) * 5);
                    noFill();
                    rect(this.x, this.y, this.w, this.h);
                }
                noStroke();
                cursor("pointer");
                if (click && curCharacter !== innerScene) {
                    curCharacter = innerScene;
                }
            }
            fill(90, 90, 100);
            rect(this.x, this.y, this.w, this.h);
            fill(255, 255, 255);
            textFont(f, 50);
            if (curCharacter !== innerScene) {
                text("Select", this.x + this.w / 2, this.y + this.h / 2);
            } else {
                textSize(40);
                text("Selected", this.x + this.w / 2, this.y + this.h / 2);
            }
        }
    };
    
    var statsB = {
        x : 200,
        y : 520,
        w : 200,
        h : 70,
        display : function() {
            strokeWeight(3);
            textFont(f, 30);
            if (mouseX > this.x && mouseX < this.x + this.w && mouseY > this.y && mouseY < this.y + this.h) {
                stroke(255, 255, 255, 60);
                for (var i = 0; i < 4; i++) {
                    strokeWeight((i + 1) * 5);
                    noFill();
                    rect(this.x, this.y, this.w, this.h);
                }
                noStroke();
                fill(0, 0, 0, 100);
                text(planetStats[curPlanet], this.x + this.w / 2 + 5, this.y - this.h * 1.5 + 5);
                cursor("pointer");
                fill(255, 255, 255);
                text(planetStats[curPlanet], this.x + this.w / 2, this.y - this.h * 1.5);
            }
            fill(90, 90, 100);
            rect(this.x, this.y, this.w, this.h);
            fill(255, 255, 255);
            textSize(50);
            text("Stats", this.x + this.w / 2, this.y + this.h / 2);
        }
    };
    
    var subB = {
        x : 0,
        y : 500,
        w : 100,
        h : 100,
        check : function() {
            if (mouseX > this.x && mouseX < this.x + this.w && mouseY > this.y && mouseY < this.y + this.h) {
                cursor("pointer");
                stroke(255, 255, 255, 60);
                for (var i = 0; i < 4; i++) {
                    strokeWeight((i + 1) * 5);
                    noFill();
                    rect(this.x, this.y, this.w, this.h);
                }
                fill(255, 255, 255);
                textFont(f, 30);
                textAlign(CENTER, CENTER);
                text("Sub", this.x + this.w / 2, this.y - this.h / 3);
                if (click && logoTime > 252) {
                    _clearLogs();
                    println("Green Ghost's Subscription page:\n\nhttps://www.khanacademy.org/cs/i/6316397177274368");
                }
            }
        }
    };
}

/** Scene functions **/
{
    var menu = function() {
        textFont(f, 30);
        background(0, 0, 0);
        showStars();
        
        pushMatrix();
        translate(300, 300);
        scale(planetSize, planetSize);
        
        if (planetSize < 1) {
            planetSize += (1 - planetSize) / 20;
        }
        
        glow(color(255, 190, 130));
        
        planet(planetImg);
        
        flip();
        flip2();
        
        if (Math.ceil(planetSize) >= 1) {
            fill(90, 90, 100);
            ellipse(sin(r * 5) * 200, 0, sin((r + 54) * 5) * 20, 20);
            if (momentum > 0) {
                r += momentum;
                momentum -= 0.008;
            }        
        }
        
        if (!front) {
           planet(planetImg);
        }
    
        moon();
        
        if (!front2) {
            planet(planetImg);
            if (front) {
                fill(90, 90, 100);
                ellipse(sin(r * 5) * 200, 0, sin((r + 54) * 5) * 20, 20);
            }
        }
        popMatrix();
    
        r2 += 0.3;
        
        if (momentum < 0) {
            playB.pack();
            storyB.pack();
            skinB.pack();
            mapB.pack();
            saveB.pack();
            if (Math.ceil(playB.size) > playB.toSize - 10) {
                showSparkles();
            }
        }
        pushMatrix();
        translate(0, 60);
        header("Escape from the Master", playB.fade, 35);
        popMatrix();

        header("Hautsa", playB.fade, 100);
        
        textAlign(LEFT, BOTTOM);
        textFont(f, 10);
        text("©2018 - " + year() + " Green Ghost Gaming", 595, 598);
        textAlign(CENTER, CENTER);
        
        subB.check();
        noStroke();
        fill(100, 100, 100);
        (rect)(0, 500, 100, 100, 0, 10, 0, 0);
        cornerLogo(50, 530, 50);
        curPlanet = 0;
        storyScene = 0;
    };
    
    var levelSelect = function() {
        Background();
        backB.pack();
        levelOneB.pack();
        levelTwoB.pack();
        levelThreeB.pack();
        levelFourB.pack();
        if (Math.ceil(backB.size) > backB.toSize - 10) {
            showSparkles();
        }
        pushMatrix();
        translate(0, -40);
        header("Levels", backB.fade, 80);
        popMatrix();
    };
    
    var skinSelect = function() {
        Background();
        backB.pack();
        forwardB.pack();
        previousB.pack();
        
        pushMatrix();
        translate(210, 210);
        scale(0.3, 0.3);
        characterDesigns[innerScene](nullPlayer);
        popMatrix();
        
        if (Math.ceil(backB.size) > backB.toSize - 10) {
            showSparkles();
        }
        
        textFont(f2, 60);
        fill(200, 200, 200);
        rect(300 - textWidth(names[innerScene]) / 2 - 10, 420, textWidth(names[innerScene]) + 20, 60);
        fill(255, 255, 255);
        text(names[innerScene], 300, 450);
        
        fill(130, 205, 255, 100 + sin(frameCount * 5) * 50);
        quad(200, 370, 400, 370, 370, 420, 230, 420);
        header("Character\nSelect", backB.fade, 50);
        selectB.display();
    };
    
    var planetList = function() {
        background(0, 0, 0);
        showStars();
        if (curPlanet === 0) {
            Galaxy(300);
        } else {
            pushMatrix();
            translate(300, 300);
            glow(glowColors[curPlanet - 1]);
            planet(galaxy[curPlanet - 1]);
            popMatrix();
            if (curPlanet === 3) {
                pushMatrix();
                translate(100, 100);
                for (var i = 0; i < glowPoints.length; i++) {
                    fill(0, 240, 0, 60 + sin((frameCount + glowPoints[i][0]) * 3) * 17);
                    triangle(glowPoints[i][0], glowPoints[i][1], glowPoints[i][2], glowPoints[i][3], glowPoints[i][4], glowPoints[i][5]);
                    pushMatrix();
                    translate(-glowPoints[i][0] / 14, -glowPoints[i][1] / 13);
                    scale(1.1, 1.1);
                    triangle(glowPoints[i][0], glowPoints[i][1], glowPoints[i][2], glowPoints[i][3], glowPoints[i][4], glowPoints[i][5]);
                    popMatrix();
                }
                
                popMatrix();
            }
        }
        pushMatrix();
        translate(0, -50);
        header(planetNames[curPlanet], backB.fade, 50);
        popMatrix();
        backB.pack();
        forwardBP.pack();
        previousBP.pack();
        statsB.display();
        if (Math.ceil(backB.size) > backB.toSize - 10) {
            showSparkles();
        }
    };
    
    var after = function() {
        Background();
        backB.pack();
        header("Level\nComplete!", backB.fade, 60);
        pushMatrix();
        translate(210, 300);
        scale(0.3, 0.3);
        characterDesigns[curCharacter](nullPlayer);
        popMatrix();
    };
}

/** Story **/
{
    var instructions = [
        "Use the arrow keys to move.\nAvoid stuff that looks like\nit will hurt you.\nYou can jump on top of enemies.\nTry to escape.\nPress R to restart.",
        "Use the arrow keys to climb\nup on falling crates.\nAvoid toxic waste.\nPress R to restart.",
        "Use the arrow keys to fight the Master.\nPress space to shoot.\nPress R to restart.",
        "Use the arrow keys to dodge\nasteroids. Press R to restart."
    ];

    var amounts = [0, 0, 0, 0];
    
    var timer = 0;
    
    var storyScenes = [
        function() {
            background(0, 0, 0);
            showStars();
            Galaxy(timer);
            fill(255, 255, 255);
            textFont(f2, 35);
            text("Hautsa is a planet in\nthe far reaches of\nthe Astronmagnus galaxy.", 300, 500);
            if (timer > 300) {
                timer = 0;
                storyScene ++;
                flash.reset();
            }
        },
        function() {
            background(0, 0, 0);
            showStars();
            pushMatrix();
            translate(300, 300);
            glow(color(0, 150, 50));
            planet(oldImg);
            popMatrix();
            fill(255, 255, 255);
            textFont(f2, 35);
            text("It was once covered\nwith lush forests\nand the ground was full\nof valuable minerals.", 300, 500);
            if (timer > 300) {
                timer = 0;
                storyScene ++;
                flash.reset();
            }
        },
        function() {
            background(0, 0, 0);
            gremxula(200 - timer / 40, 200 - timer / 40, 100 + timer / 40, 0, 0);
            fill(255, 255, 255);
            textFont(f2, 35);
            text("But the gremxula came,\nenslaved the population...", 300, 500);
            if (timer > 300) {
                timer = 0;
                storyScene ++;
                flash.reset();
            }        
        },
        function() {
            background(0, 0, 0);
            showStars();
            pushMatrix();
            translate(300, 300);
            glow(glowColors[0]);
            planet(galaxy[0]);
            popMatrix();
            fill(255, 255, 255);
            textFont(f2, 35);
            text("... and harvested\neverything of value, leaving\nHautsa a desert planet.", 300, 500);
            if (timer > 300) {
                timer = 0;
                storyScene ++;
                flash.reset();
            }        
        },
        function() {
            background(0, 0, 0);
            spaceship2(300, 250, 90, 200);
            fill(255, 255, 255);
            textFont(f2, 35);
            text("Unfortunately, the gremxula\nhave decided to destroy\nHautsa to make way for a new\nhive. You have to escape!", 300, 500);
            if (timer > 300) {
                timer = 0;
                storyScene = 0;
                scene = "menu";
                flash.reset();
            }        
        }
    ];
    
    var story = function() {
        timer ++;
        storyScenes[storyScene]();
        backB.pack();
    };
    
    var part1 = function() {
        player.lives = 3;
        targetX = continueGameB.x;
        targetY = continueGameB.y;
        Background();
        fill(200, 200, 200);
        rect(0, 350, 600, 250);
        for (var i = 0; i < 3; i++) {
            gremxula(40 + i * 200, 240, 60, 0, 0);
        }
        
        pushMatrix();
        translate(30, 520);
        scale(0.3, 0.3);
        characterDesigns[curCharacter]({moveX : 0, moveY : -40});
        popMatrix();
        continueGameB.pack();
        if (Math.ceil(continueGameB.size) > continueGameB.toSize - 10) {
            showSparkles();
        }
        fill(255, 255, 255, continueGameB.fade);
        beginShape();
        vertex(250, 500);
        vertex(320, 400);
        bezierVertex(600, 420, 500, 200, 300, 250);
        bezierVertex(200, 270, 200, 400, 300, 400);
        endShape();
        
        fill(0, 0, 0, continueGameB.fade);
        
        textFont(f2, 40);
        text("I need to\nescape!", 360, 325);
        textFont(f, 25);
        fill(0, 0, 0, 100);
        text(instructions[0].substring(0, amounts[0]), 305, 155);
        fill(255, 255, 255);
        text(instructions[0].substring(0, amounts[0]), 300, 150);
        amounts[0] ++;
    };
    
    var part2 = function() {
        climber.lives = 3;
        targetX = continueGameB.x;
        targetY = continueGameB.y;
        Background2();
        fill(120, 120, 120);
        rect(320, 400, 150, 150);
        rect(480, 400, 150, 150);
        rect(400, 250, 150, 150);
        
        image(crateImg, 330, 410, 130, 130);
        image(crateImg, 490, 410, 130, 130);
        image(crateImg, 410, 260, 130, 130);
        pushMatrix();
        translate(30, 520);
        scale(0.3, 0.3);
        characterDesigns[curCharacter]({moveX : 0, moveY : -40});
        popMatrix();
        continueGameB.pack();
        if (Math.ceil(continueGameB.size) > continueGameB.toSize - 10) {
            showSparkles();
        }
        
        fill(255, 255, 255, continueGameB.fade);
        
        beginShape();
        vertex(250, 500);
        vertex(320, 400);
        bezierVertex(600, 420, 500, 200, 300, 250);
        bezierVertex(200, 270, 200, 400, 300, 400);
        endShape();
        
        fill(0, 0, 0, continueGameB.fade);
        
        textFont(f2, 30);
        text("I'll climb out!", 360, 325);
        
        textFont(f, 25);
        fill(0, 0, 0, 100);
        text(instructions[1].substring(0, amounts[1]), 305, 155);
        fill(255, 255, 255);
        text(instructions[1].substring(0, amounts[1]), 300, 150);
        amounts[1] ++;
    };
    
    var box1 = function() {
        Background4();
        fill(160, 160, 160);
        rect(0, 470, 600, 130);
        Box(350, 400, 100);
        textFont(f2, 50);
        fill(0, 0, 0, 100);
        text("What's this?", 405, 305 + sin(frameCount * 4) * 10);
        triangle(405, 380 + sin(frameCount * 4) * 10, 445, 335 + sin(frameCount * 4) * 10, 365, 335 + sin(frameCount * 4) * 10);
        fill(255, 255, 255);
        text("What's this?", 400, 300 + sin(frameCount * 4) * 10);
        triangle(400, 375 + sin(frameCount * 4) * 10, 440, 330 + sin(frameCount * 4) * 10, 360, 330 + sin(frameCount * 4) * 10);
        if (mouseX > 350 && mouseX < 450 && mouseY > 400 && mouseY < 500) {
            cursor("pointer");
            if (click) {
                scene = "inter2";
            }
        }
        pushMatrix();
        translate(100, 400);
        scale(1/ 6, 1 / 6);
        characterDesigns[curCharacter]({moveX : 40, moveY : 0});
        popMatrix();
    };
    
    var box2 = function() {
        Background3();
        if (!boxClicked) {
            Box(150, 150, 300);
            specialText("Click", 300, 530, 70);
            specialText("Magic Box", 300, 70, 90);
        } else {
            for (var i = 0; i < particles.length; i++) {
                fill(255, 150, 0, 100);
                ellipse(particles[i].pos.x, particles[i].pos.y, particles[i].size, particles[i].size);
                particles[i].pos.x += sin(particles[i].direc) * particles[i].veloc.x;
                particles[i].pos.y += cos(particles[i].direc) * particles[i].veloc.y;
            }
            gun(300, 270, 150, 0);
            specialText("A Gun!", 300, 70, 90);
            continueGameB.pack();
        }
        if (click) {
            boxClicked = true;
        }
    };
    
    var part3 = function() {
        targetX = continueGameB.x;
        targetY = continueGameB.y;
        Background4();
        fill(100, 100, 100);
        rect(0, 350, 600, 250);
        rect(200, 250, 200, 100);
        
        master(240, 140, 60, 0, 0);
        
        pushMatrix();
        translate(30, 520);
        scale(0.3, 0.3);
        characterDesigns[curCharacter]({moveX : 0, moveY : -40});
        popMatrix();
        continueGameB.pack();
        if (Math.ceil(continueGameB.size) > continueGameB.toSize - 10) {
            showSparkles();
        }
        fill(255, 255, 255, continueGameB.fade);
        beginShape();
        vertex(250, 500);
        vertex(320, 400);
        bezierVertex(600, 420, 500, 200, 300, 250);
        bezierVertex(200, 270, 200, 400, 300, 400);
        endShape();
        
        fill(0, 0, 0, continueGameB.fade);
        
        textFont(f2, 35);
        text("Oh no!\nthe Master!", 360, 320);
        
        textFont(f, 25);
        fill(0, 0, 0, 100);
        text(instructions[2].substring(0, amounts[2]), 305, 55);
        fill(255, 255, 255);
        text(instructions[2].substring(0, amounts[2]), 300, 50);
        amounts[2] ++;
    };
    
    var part4 = function() {
        targetX = continueGameB.x;
        targetY = continueGameB.y;
    
        Background5();
        fill(100, 100, 100);
        quad(0, 450, 500, 450, 200, 600, 0, 600);
        spaceship2(200, 420, 90, 200);
        
        pushMatrix();
        translate(30, 520);
        scale(0.3, 0.3);
        characterDesigns[curCharacter]({moveX : 0, moveY : -40});
        popMatrix();
        continueGameB.pack();
        if (Math.ceil(continueGameB.size) > continueGameB.toSize - 10) {
            showSparkles();
        }
        fill(255, 255, 255, continueGameB.fade);
        beginShape();
        vertex(250, 500);
        vertex(320, 400);
        bezierVertex(600, 420, 500, 200, 300, 250);
        bezierVertex(200, 270, 200, 400, 300, 400);
        endShape();
        
        fill(0, 0, 0, continueGameB.fade);
        
        textFont(f2, 40);
        text("A ship!", 360, 325);
        textFont(f, 25);
        fill(0, 0, 0, 100);
        text(instructions[3].substring(0, amounts[3]), 305, 155);
        fill(255, 255, 255);
        text(instructions[3].substring(0, amounts[3]), 300, 150);
        amounts[3] ++;
    };
}

/** Game one **/
{
    var player, speed = 7;
    
    var curSign = 0;
    
    var messages = [
        "Go Right =>",
        "Escape while you can!",
        "Welcome to\nTuyau!"
    ];
    
    var blocks = [];
    
    var MAP = [
        "11            8",    
        "41       9    8",
        "31       777777",    
        "311 5 6        ",
        "333333         ",    
        "         6   5 6",
        "          00000",    
        "     7         ",
        "               ",    
        "7              ",
        "               ",    
        "33311114       ",
        "       3       ",    
        "       30      ",
        "       30      ", 
        "11     30      ",
        "1      30      ", 
        "       302     ",
        "       33333   ",    
        "  2        0   ",
        "  0        0   ",    
        "  0 5  5  60   ",
        "  0 5  5  60   ",  
        "  00000000 0   ",
        " 20        02  ",      
        "  0        0   ",
        "  0        0   ",
        "  0      000   ",
        "  0 5  5  6    ",
        "  000000000    ",
        "2             2",
        "3333    3333333", 
        "             11",
        "             11",    
        "             11",
        "             11",    
        "            111",
        "           1133",    
        "    2      11  ",    
        "  00000        ", 
        "               ",    
        "33             ",
        "333           7",    
        "1            77",
        "1          7777",        
        "1      33003300",
        "1     3        ",    
        "4    3         ",
        "3         6  5 6",
        "3          0000",
        "3333      00000",
        "   3       0   ",
        "3333       0   ",
        "        9  5   6",
        "        4444444",
        "               ",
        "               ",
        "p 9    4       ",
        "700 5  3       ",    
        "77000003       ",
        "07733003       ",    
        "033003033111111",
        "773303003333333",    
        "303330300000000",    
        "077007777700770",
        "077770777777777"
    ];
    
    var Camera = {
        x : 0,
        y : 0,
        largeX : - MAP[0].length * blockSize * 2 + width,
        largeY : - MAP.length * blockSize * 2 + height,
        
        move : function(x, y) {
            this.largeX = - MAP[0].length * blockSize * 2 + width;
            this.largeY = - MAP.length * blockSize * 2 + height;
            
            this.x = Math.round(width / 2 - x - blockSize);
            
            this.y = Math.round(height / 2 - y - blockSize);
            
            this.x = this.x >= 0 ? 0 : this.x;
            this.x = this.x <= this.largeX ? this.largeX : this.x;
            
            this.y = this.y >= 0 ? 0 : this.y;
            this.y = this.y <= this.largeY ? this.largeY : this.y;
    
        },
        show : function() {
            translate(this.x, this.y);
        }
    };
    
    var inside = function(x, y, x2, y2, size) {
        return x + size > x2 && x < x2 + size && y + size > y2 && y < y2 + size;
    };
    
    var designs = {
        "0" : function(x, y) {
            image(blockImg, x, y);
        },
        "1" : function(x, y) {
            noStroke();
            fill(0, 255, 0);
            rect(x, y, blockSize * 2, blockSize * 2);
            strokeWeight(3);
            strokeCap(SQUARE);
            stroke(0, 200, 0);
            bezier(x, y + blockSize, x + blockSize / 2, y + blockSize * 2, x + blockSize / 2 * 3, y, x + blockSize * 2, y + blockSize);
            pushMatrix();
            translate(0, -20);
            bezier(x, y + blockSize, x + blockSize / 2, y + blockSize * 2, x + blockSize / 2 * 3, y, x + blockSize * 2, y + blockSize);
            translate(0, 40);
            bezier(x, y + blockSize, x + blockSize / 2, y + blockSize * 2, x + blockSize / 2 * 3, y, x + blockSize * 2, y + blockSize);
            popMatrix();
            noStroke();
            fill(0, 220, 0);
            ellipse(x + blockSize / 4 * 3, y + blockSize / 2, 15, 15);
            ellipse(x + blockSize, y + blockSize / 2 * 3, 20, 20);
            ellipse(x + blockSize / 2 * 3, y + blockSize / 4 * 3, 10, 10);
        },
        "2" : function(x, y) {
            image(springImg, x, y, blockSize * 2, blockSize * 2);
        },
        "3" : function(x, y) {
            fill(80, 80, 80);
            rect(x, y, blockSize * 2, blockSize * 2);
        },
        "4" : function(x, y) {
            pipe(x, y, blockSize * 2, blockSize * 2, 80);
        },
        "5" : function(x, y) {
            gremxula(x, y, blockSize, this.s * 20, 0);
        },
        "6" : function() {
            return;
        },
        "7" : function(x, y) {
            fill(215, 200, 155);
            noStroke();
            rect(x, y, blockSize * 2, blockSize * 2);
            image(sandImg, x, y, blockSize * 2, blockSize * 2);
        },
        "8" : function(x, y) {
            if (inside(x, y, player.x, player.y, blockSize * 2)) {
                scene = "after";
                flash.reset();
                unlocked = Math.max(unlocked, 1);
            }
        },
        "9" : function(x, y) {
            fill(0, 0, 60);
            rect(x, y, blockSize * 2, blockSize);
            fill(150, 150, 150);
            rect(x + blockSize / 4 * 3, y + blockSize, blockSize / 2, blockSize);
            stroke(255, 255, 255);
            strokeWeight(1);
            for (var i = 0; i < 3; i++) {
                line(x + 3, y + i * 5 + 10, x + blockSize * 2 - 3, y + i * 5 + 10);
            }
            if (inside(x, y, player.x, player.y, blockSize * 2)) {
                textFont(f, 30);
                fill(0, 0, 0, 100);
                text(this.text, this.x + blockSize + 5, this.y - blockSize * 1.7 + 5);
                fill(255, 255, 255);
                text(this.text, this.x + blockSize, this.y - blockSize * 1.7);
            }
            noStroke();
        }
    };
    
    var reactionsLeft = {
        "0" : function(obj, self) {
            obj.x = self.x - blockSize * 2;
        },
        "1" : function(obj, self) {
            if (obj.alive) {
                obj.lives --;
                obj.timer = 0;
            }
            obj.alive = false;
            if (obj.lives < 1) {
                newLevel();
            }
            obj.x = self.x - blockSize * 2;
        },
        "2" : function(obj, self) {
            obj.x = self.x - blockSize * 2;
        },
        "3" : function(obj, self) {
            obj.x = self.x - blockSize * 2;
        },
        "4" : function(obj, self) {
            obj.x = self.x - blockSize * 2;
        },
        "5" : function(obj) {
            if (obj.alive) {
                obj.lives --;
                obj.timer = 0;
            }
            obj.alive = false;
            if (obj.lives < 1) {
                newLevel();
            }
        },
        "6" : function() {
            return;
        },
        "7" : function(obj, self) {
            obj.x = self.x - blockSize * 2;
        },
        "8" : function() {
            return;
        },
        "9" : function() {
            return;
        }
    };
    
    var reactionsRight = {
        "0" : function(obj, self) {
            obj.x = self.x + blockSize * 2;
        },
        "1" : function(obj, self) {
            if (obj.alive) {
                obj.lives --;
                obj.timer = 0;
            }
            obj.alive = false;
            if (obj.lives < 1) {
                newLevel();
            }
            obj.x = self.x + blockSize * 2;
        },
        "2" : function(obj, self) {
            obj.x = self.x + blockSize * 2;
        },
        "3" : function(obj, self) {
            obj.x = self.x + blockSize * 2;
        },
        "4" : function(obj, self) {
            obj.x = self.x + blockSize * 2;
        },
        "5" : function(obj) {
            if (obj.alive) {
                obj.lives --;
                obj.timer = 0;
            }
            obj.alive = false;
            if (obj.lives < 1) {
                newLevel();
            }
        },
        "6" : function() {
            return;
        },
        "7" : function(obj, self) {
            obj.x = self.x + blockSize * 2;
        },
        "8" : function() {
            return;
        },
        "9" : function() {
            return;
        }
    };
    
    var reactionsTop = {
        "0" : function(obj, self) {
            obj.y = self.y - blockSize * 2;
            obj.canJump = true;
            obj.gravity = 0;
        },
        "1" : function(obj) {
            if (obj.alive) {
                obj.lives --;
                obj.timer = 0;
            }
            obj.alive = false;
            if (obj.lives < 1) {
                newLevel();
            }
            obj.gravity = -100;
        },
        "2" : function(obj, self) {
            obj.y = self.y - blockSize * 2;
            obj.canJump = false;
            obj.gravity = -16;
            self.bounce = blockSize * 2;
        },
        "3" : function(obj, self) {
            obj.y = self.y - blockSize * 2;
            obj.canJump = true;
            obj.gravity = 0;
        },
        "4" : function(obj, self) {
            obj.y = self.y - blockSize * 2;
            obj.canJump = true;
            obj.gravity = 0;
        },
        "5" : function(obj, self, i) {
            if (obj.alive) {
                blocks.splice(i, 1);
                obj.gravity = -10;
            }
        },
        "6" : function() {
            return;
        },
        "7" : function(obj, self) {
            obj.y = self.y - blockSize * 2;
            obj.canJump = true;
            obj.gravity = 0;
        },
        "8" : function() {
            return;
        },
        "9" : function() {
            return;
        }
    };
    
    var reactionsBottom = {
        "0" : function(obj, self) {
            obj.y = self.y + blockSize * 2;
            obj.gravity = 1;
        },
        "1" : function(obj, self) {
            if (obj.alive) {
                obj.lives --;
                obj.timer = 0;
            }
            obj.alive = false;
            obj.y = self.y + blockSize * 2;
            obj.gravity = 1;
            if (obj.lives < 1) {
                newLevel();
            }
        },
        "2" : function(obj, self) {
            obj.y = self.y + blockSize * 2;
            obj.gravity = 1;
        },
        "3" : function(obj, self) {
            obj.y = self.y + blockSize * 2;
            obj.gravity = 1;
        },
        "4" : function(obj, self) {
            obj.y = self.y + blockSize * 2;
            obj.gravity = 1;
        },
        "5" : function(obj) {
            if (obj.alive) {
                obj.lives --;
                obj.timer = 0;
            }
            obj.alive = false;
            if (obj.lives < 1) {
                newLevel();
            }
        },
        "6" : function() {
            return;
        },
        "7" : function(obj, self) {
            obj.y = self.y + blockSize * 2;
            obj.gravity = 1;
        },
        "8" : function() {
            return;
        },
        "9" : function() {
            return;
        }
    };
        
    /** Player and Block constructors **/
    {
        var Player = function(x, y) {
            this.x = x;
            this.y = y;
            this.canJump = false;
            this.gravity = 0;
            this.moveX = 0;
            this.moveY = 0;
            this.lives = 3;
            this.alive = false;
            this.timer = 0;
            this.shine = false;
            this.direc = "right";
        };
        
        var Block = function(x, y, character) {
            this.x = x * blockSize * 2;
            this.y = y * blockSize * 2;
            this.character = character;
            this.design = designs[character];
            this.v = 0;
            this.h = 0;
            this.s = 0;
            if (this.character === "5") {
                this.s = 2;
            }
            if (this.character === "9") {
                this.text = messages[curSign];
                curSign ++;
            }
            this.bounce = 0;
        };
    }
    
    player = new Player(0, 0);
    
    /** Player and Block methods **/
    {
        Player.prototype.display = function() {
            if (this.alive || this.shine) {
                displayCharacter(curCharacter, blockSize, this.direc, this);
            }
            if (this.timer % 10 === 0) {
                this.shine = !this.shine;
            }
            this.timer ++;
            if (this.timer > 100) {
                this.alive = true;
            }
        };
        
        Player.prototype.move = function() {
            if (keys[LEFT]) {
                this.direc = "left";
                this.x -= speed;
                this.moveX -= 30;
                for (var i = 0; i < blocks.length; i++) {
                    blocks[i].collideRight();
                }
            } 
            if (keys[RIGHT]) {
                this.direc = "right";
                this.x += speed;
                this.moveX += 30;
                for (var i = 0; i < blocks.length; i++) {
                    blocks[i].collideLeft();
                }
            }
            this.moveX -= this.moveX > 0 ? 10 : 0;
            this.moveX += this.moveX < 0 ? 10 : 0;
            this.moveX = constrain(this.moveX, -40, 40);
            
            for (var i = 0; i < blocks.length; i++) {
                if (blocks[i].x + Camera.x > width || blocks[i].x + Camera.x < -blockSize * 2 || blocks[i].y + Camera.y > height || blocks[i].y + Camera.y < -blockSize * 2) {
                    continue;
                }
                blocks[i].collideLeft();
            }
            for (var i = 0; i < blocks.length; i++) {
                if (blocks[i].x + Camera.x > width || blocks[i].x + Camera.x < -blockSize * 2 || blocks[i].y + Camera.y > height || blocks[i].y + Camera.y < -blockSize * 2) {
                    continue;
                }
                blocks[i].collideRight();
            }
            if ((keys[UP] || keys[32]) && this.canJump) {
                this.gravity = -11.8;
                this.canJump = false;
            }
            this.canJump = false;
            this.y += this.gravity;
            for (var i = 0; i < blocks.length; i++) {
                blocks[i].collideTop(i);
                blocks[i].collideBottom();
            }
            this.gravity += 0.3;
            this.moveY = this.gravity * 10;
            this.moveY = constrain(this.moveY, -40, 40);
            
            this.x = constrain(this.x, 0, MAP[0].length * blockSize * 2 - blockSize * 2);
            this.gravity = constrain(this.gravity, -20, 15);
        };
        
        Player.prototype.showLives = function() {
            for (var i = 0; i < this.lives; i++) {
                fill(255, 0, 0);
                pushMatrix();
                translate(475 + i * 50 + (3 - this.lives) * 50, 5);
                rotate(45);
                (rect)(0, -5, 20, 35, 7, 7, 0, 0);
                (rect)(-15, 10, 35, 20, 7, 0, 0, 7);
                popMatrix();
            }
        };
        
        Block.prototype.display = function() {
            pushMatrix();
            if (this.character === "2") {
                this.bounce -= 10;
                this.bounce = constrain(this.bounce, 0, blockSize * 2);
                translate(0, this.bounce);
            }
            this.design(this.x, this.y);
            popMatrix();
            this.x += this.s;
            for (var i = 0; i < blocks.length; i++) {
                this.v = (blockSize * 2) - abs(blocks[i].y - this.y);
                this.h = (blockSize * 2) - abs(blocks[i].x - this.x);             if (this.x >= blocks[i].x && this.v > this.h && this.h > 0 || blocks[i].x > this.x && this.v > this.h && this.h > 0) {
                    this.s = -this.s;
                }
            }
        };
        
        Block.prototype.collideRight = function() {
            this.v = (blockSize * 2) - abs(player.y - this.y);
            this.h = (blockSize * 2) - abs(player.x - this.x); 
            if (player.x > this.x && this.v > this.h && this.h > 0) {
                reactionsRight[this.character](player, this);
            }
        };
    
        Block.prototype.collideLeft = function() {
            this.v = (blockSize * 2) - abs(player.y - this.y);
            this.h = (blockSize * 2) - abs(player.x - this.x); 
            if (this.x >= player.x && this.v > this.h && this.h > 0) {
                reactionsLeft[this.character](player, this);
            }
        };
        
        Block.prototype.collideTop = function(i) {
            this.v = (blockSize * 2) - abs(player.y - this.y);
            this.h = (blockSize * 2) - abs(player.x - this.x); 
            if (this.y > player.y && this.h >= this.v && this.v > 0) { 
                reactionsTop[this.character](player, this, i);
            }
        };
        
        Block.prototype.collideBottom = function() {
            this.v = (blockSize * 2) - abs(player.y - this.y);
            this.h = (blockSize * 2) - abs(player.x - this.x); 
            if (player.y >= this.y && this.h >= this.v && this.v > 0) { 
                reactionsBottom[this.character](player, this);
            }
        };
    }
    
    newLevel = function() {
        flash.reset();
        blocks = [];
        curSign = 0;
        player.lives = 3;
        for (var i = 0; i < MAP.length; i ++) {
            for (var j = 0; j < MAP[i].length; j++) {
                if (MAP[i][j] !== " " && MAP[i][j] !== "p") {
                    blocks.push(new Block(j, i, MAP[i][j]));
                } else if (MAP[i][j] === "p") {
                    player.x = j * blockSize * 2;
                    player.y = i * blockSize * 2;
                }
            }
        }
    };

    var game1 = function() {
        Camera.move(player.x, player.y);
        pushMatrix();
        translate(floor(Camera.x / 10), floor(Camera.y / 10));
        Background();
        popMatrix();
        pushMatrix();
        Camera.show();
        for (var i = 0; i < blocks.length; i++) {
            
            if (blocks[i].x + Camera.x > width || blocks[i].x + Camera.x < -blockSize * 2 || blocks[i].y + Camera.y > height || blocks[i].y + Camera.y < -blockSize * 2) {
                if (blocks[i].character === "5") {
                    blocks[i].display();
                }
                continue;
            }
            blocks[i].display();
        }
        player.display();
        player.move();
        popMatrix();
        player.showLives();
        backB2.pack();
    };
}

/** Game two **/
{
    var crates = [], blobs = [], blobSpeed = 200;
    
    var ClimbCamera = {
        y : 0,
        largeY : 0,
        move : function(y) {
            this.y = Math.round(height / 2 - y);
            this.largeY = -blockSize;
            this.y = this.y <= this.largeY ? this.largeY : this.y;
        },
        show : function() {
            translate(0, this.y);
        }
    };
    
    var winPlatform = {
        y : -45 * blockSize,
        x : 350,
        w : 250,
        h : 20,
        collisions : [0, 0],
        display : function() {
            fill(170, 170, 170);
            rect(this.x, this.y, this.w, this.h);
            pushMatrix();
            translate(300, -45 * blockSize - 200);
            scale((2 + sin(frameCount * 5)) / 2, (2 + sin(frameCount * 5)) / 2);
            fill(255, 255, 255);
            beginShape();
            vertex(-50, -20);
            vertex(0, -20);
            vertex(0, -40);
            vertex(50, -10);
            vertex(0, 20);
            vertex(0, 0);
            vertex(-50, 0);
            endShape();
            popMatrix();
        },
        collide : function() {
            this.collisions[0] = (this.h * 2 + blockSize) - Math.abs(climber.y - this.y);
            this.collisions[1] = (this.w + blockSize) - Math.abs(climber.x - (this.x + 210));
            if (this.y > climber.y && this.collisions[1] >= this.collisions[0] && this.collisions[0] > 0) {
                climber.gravity = 0;
                climber.y = this.y - blockSize * 2;
                climber.canJump = true;
            }
            if (climber.y < this.y && climber.x >= width - blockSize * 2) {
                scene = "after";
                flash.reset();
                unlocked = Math.max(unlocked, 2);
            }
        }
    };
    
    var Climber = function(x, y) {
        this.x = x;
        this.y = y;
        this.gravity = 0;
        this.v = 0;
        this.h = 0;
        this.canJump = false;
        this.lives = 3;
        this.direc = "right";
        this.moveX = 0;
        this.moveY = 0;
        this.alive = false;
        this.timer = 0;
        this.shine = false;
    };
    
    Climber.prototype.display = function() {
        if (this.alive || this.shine) {
            displayCharacter(curCharacter, blockSize, this.direc, this);
        }
        if (this.timer % 10 === 0) {
            this.shine = !this.shine;
        }
        this.timer ++;
        if (this.timer > 100) {
            this.alive = true;
        }
    };
    
    Climber.prototype.move = function() {
        if (keys[UP] && this.canJump) {
            this.gravity = -11.8;
            this.canJump = false;
        }
        if (keys[LEFT]) {
            this.direc = "left";
            this.x -= speed;
            this.moveX -= 30;
            this.collideLeft(crates);
        }
        if (keys[RIGHT]) {
            this.direc = "right";
            this.x += speed;
            this.moveX += 30;
            this.collideRight(crates);
        }
        
        this.moveX -= this.moveX > 0 ? 10 : 0;
        this.moveX += this.moveX < 0 ? 10 : 0;
        this.moveX = constrain(this.moveX, -40, 40);
        
        this.y += this.gravity;
        this.gravity += 0.3;
        
        this.moveY = this.gravity * 10;
        this.moveY = constrain(this.moveY, -40, 40);
        
        this.canJump = false;
        
        if (this.y > 480) {
            this.y = 480;
            this.gravity = 0;
            this.canJump = true;
        }
        this.collideTop(crates);
        this.collideBottom(crates);
        
        this.x = constrain(this.x, 0, width - blockSize * 2);
        
        this.gravity = constrain(this.gravity, -20, 15);
    };
    
    Climber.prototype.collideTop = function(list) {
        for (var i = 0; i < list.length; i++) {
            this.v = (blockSize * 2) - Math.abs(list[i].y - this.y);
            this.h = (blockSize * 2) - Math.abs(list[i].x - this.x);
            if (this.y > list[i].y && this.h >= this.v && this.v > 0) {
                list[i].gravity = 0;
                list[i].y = this.y - blockSize * 2;
            }
        }
    };
    
    Climber.prototype.collideBottom = function(list) {
        for (var i = 0; i < list.length; i++) {
            this.v = (blockSize * 2) - Math.abs(list[i].y - this.y);
            this.h = (blockSize * 2) - Math.abs(list[i].x - this.x);
            if (list[i].y >= this.y && this.h >= this.v && this.v > 0) {
                this.gravity = 0;
                this.y = list[i].y - blockSize * 2;
                this.canJump = true;
            }
        }
    };
    
    Climber.prototype.collideRight = function(list) {
        for (var i = 0; i < list.length; i++) {
            this.v = (blockSize * 2) - Math.abs(list[i].y - this.y);
            this.h = (blockSize * 2) - Math.abs(list[i].x - this.x);
            if (list[i].x > this.x && this.v > this.h && this.h > 0) {
                this.x = list[i].x - blockSize * 2;
            }
        }
    };
    
    Climber.prototype.collideLeft = function(list) {
        for (var i = 0; i < list.length; i++) {
            this.v = (blockSize * 2) - Math.abs(list[i].y - this.y);
            this.h = (blockSize * 2) - Math.abs(list[i].x - this.x);
            if (this.x >= list[i].x && this.v > this.h && this.h > 0) {
                this.x = list[i].x + blockSize * 2;
            }
        } 
    };
    
    Climber.prototype.showLives = function() {
        for (var i = 0; i < this.lives; i++) {
            fill(255, 0, 0);
            pushMatrix();
            translate(475 + i * 50 + (3 - this.lives) * 50, 5);
            rotate(45);
            (rect)(0, -5, 20, 35, 7, 7, 0, 0);
            (rect)(-15, 10, 35, 20, 7, 0, 0, 7);
            popMatrix();
        }
    };
        
    climber = new Climber(300 - blockSize, 500);    
        
    var Crate = function(index) {
        this.width = blockSize * 2;
        this.height = blockSize * 2;
        this.x = Math.floor(random(0, width - this.width) / (this.width * 2/ 3)) * this.width * 2 / 3;
        this.y = -this.height - ClimbCamera.y;
        this.gravity = 0;
        this.index = index;
        this.v = 0;
        this.h = 0;
        this.c = 0;
        for (var i = 0; i < crates.length; i++) {
            while (inside(this.x, this.y, crates[i].x, crates[i].y, blockSize * 2)) {
                this.y -= 5;
            }
        }
    };
    
    Crate.prototype.display = function() {
        if (this.y + ClimbCamera.y > height || this.y + blockSize * 2 + ClimbCamera.y < 0) {
            return;
        }
        fill(120, 120, 120);
        rect(this.x, this.y, this.width, this.height);
        image(crateImg, this.x + 5, this.y + 5, this.width - 10, this.height - 10);
    };
    
    Crate.prototype.move = function() {
        this.y += this.gravity;
        this.gravity += 0.3;
        if (this.collide(crates)) {
            this.y = this.c - this.height;
            this.gravity = 0;
        }
        
    };
    
    Crate.prototype.collide = function(list) {
        if (this.y > 540 - this.height) {
            this.c = 540;
            return true;
        }
        for (var i = 0; i < list.length; i++) {
            this.v = (blockSize * 2) - Math.abs(list[i].y - this.y);
            this.h = (blockSize * 2) - Math.abs(list[i].x - this.x);
            if (list[i].y >= this.y && this.h >= this.v && this.v > 0 && i !== this.index) {
                this.c = list[i].y;
                return true;
            }
        }
        return false;
    };
    
    var Blob = function() {
        this.x = Math.round(random(0, width));
        this.y = -blockSize - ClimbCamera.y;
        this.speed = 6;
        this.timer = 80;
    };
    
    Blob.prototype.display = function() {
        if (this.timer < 0) {
            fill(0, 255, 0);
            imageMode(CENTER);
            image(blobImg, this.x, this.y - blockSize / 2, blockSize, blockSize * 2);
            imageMode(CORNER);
        }
    };
    
    Blob.prototype.collide = function(other) {
        return this.x + blockSize / 2 > other.x && this.x - blockSize / 2 < other.x + blockSize * 2 && this.y + blockSize / 2 > other.y && this.y - blockSize / 2 < other.y + blockSize * 2 && dist(this.x, this.y, other.x + blockSize, other.y + blockSize) < Math.sqrt(blockSize * blockSize + blockSize * blockSize) + blockSize / 2;
    };
    
    Blob.prototype.move = function() {
        if (this.timer < 0) {
            this.y += this.speed;
            this.speed += 0.1;
        }
        this.timer --;
    };
    
    Blob.prototype.past = function() {
        return this.y > height + blockSize * 2;
    };
    
    Blob.prototype.warn = function() {
        if (this.timer > 0) {
            fill(255, 255, 0);
            triangle(this.x - 25, 110, this.x + 25, 110, this.x, 65);
            fill(0, 0, 0);
            textSize(30);
            text("!", this.x, 95);
            this.y = -blockSize - ClimbCamera.y;
        }
    };
    
    var showCrates = function() {
        for (var i = 0; i < crates.length; i++) {
            crates[i].display();
            crates[i].move();
        }
        for (var i = 0; i < crates.length; i++) {
            for (var j = 0; j < blobs.length; j++) {
                if (blobs[j].collide(crates[i]) && blobs[j].timer < 0 && crates[i].gravity < 0.5) {
                    blobs.splice(j, 1);
                    continue;
                }
            }
        }
    };
    
    var showBlobs = function() {
        for (var i = 0; i < blobs.length; i++) {
            blobs[i].display();
            blobs[i].move();
        }
        for (var i = 0; i < blobs.length; i++) {
            if (blobs[i].collide(climber) && climber.alive) {
                climber.lives --;
                climber.timer = 0;
                climber.shine = false;
            }
            if (blobs[i].past() || (blobs[i].collide(climber) && climber.alive)) {
                if (blobs[i].collide(climber) && climber.alive) {
                    climber.alive = false;
                }
                blobs.splice(i, 1);
            }
        }
    };
    
    var newClimb = function() {
        flash.reset();
        frameCount = 1;
        crates = [];
        blobs = [];
        blobSpeed = 200;
        climber = new Climber(300 - blockSize, 500);    
    };
    
    var game2 = function() {
        if (frameCount % 50 === 0  && Math.floor((480 - climber.y) / (blockSize * 2)) < 30) {
            crates.push(new Crate(crates.length));
        }
        if (frameCount % blobSpeed === 0 && Math.floor((480 - climber.y) / (blockSize * 2)) < 30) {
            blobs.push(new Blob());
            blobSpeed -= 2;
            blobSpeed = constrain(blobSpeed, 70, 200);
        }
        ClimbCamera.move(climber.y);
        pushMatrix();
        translate(0, ClimbCamera.y / 2);
        Background2();
        popMatrix();
        pushMatrix();
        ClimbCamera.show();
        climber.move();
        climber.display();
        showCrates();
        showBlobs();
        winPlatform.collide();
        winPlatform.display();
        popMatrix();
        textFont(f2, 40);
        textAlign(LEFT, TOP);
        fill(255, 255, 255);
        text("Distance: " + constrain(Math.floor((480 - climber.y) / (blockSize * 2)), 0, 30) + "/30", 5, 5);
        textAlign(CENTER, CENTER);
        climber.showLives();
        for (var i = 0; i < blobs.length; i++) {
            blobs[i].warn();
        }
        if (climber.lives < 1) {
            newClimb();
        }
        targetX = backB2.x;
        targetY = backB2.y;
        backB2.pack();
        if (Math.ceil(backB.size) > backB.toSize - 10) {
            showSparkles();
        }
    };
}

/** Game three **/
{
    var ARENA = [
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [99, 99, -1, -1, -1, -1, -1, -1, -1, 99],
        [-1, -1, -1, -1, -1, -1, 99, -1, -1, -1],
        [-1, -1, -1, 99, 99, 99, 99, 99, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [99, -1, -1, -1, -1, -1, -1, -1, -1, -1],  
        [99, 99, -1, -1, -1, -1, -1, 99, 99, -1],
        [99, 99, 99, 99, 99, 99, 99, 99, 99, 99]
    ];
    
    var resetMap = function() {
        ARENA = [
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [99, 99, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, 99, -1, -1, -1],
            [-1, -1, -1, 99, 99, 99, 99, 99, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            [99, -1, -1, -1, -1, -1, -1, -1, -1, -1],  
            [99, 99, -1, -1, -1, -1, -1, 99, 99, -1],
            [99, 99, 99, 99, 99, 99, 99, 99, 99, 99]    
        ];
    };
    
    var direcs = [
        [0, 1],
        [1, 0],
        [0, -1],
        [-1, 0]
    ];
    
    var direcs2 = [
        [0, 1],
        [0, -1],
        [1, 0],
        [-1, 0],
        [1, 1],
        [1, -1],
        [-1, -1],
        [-1, 1]
    ];
    
    var Maker = function() {
        this.xTo = 2;
        this.yTo = 13;
        ARENA[this.xTo][this.yTo] = 0;
        this.x = 0;
        this.y = 0;
        this.toDo = [
            []
        ];
    };
    
    Maker.prototype.make = function() {
        for (var i = 0; i < ARENA.length; i++) {
            for (var j = 0; j < ARENA[i].length; j++) {
                if (ARENA[i][j] === 0) {
                    this.x = i;
                    this.y = j;
                }
            }
        }
    };
    
    Maker.prototype.add = function() {
        for (var i = 0; i < direcs.length; i++) {
            this.toDo[0].push([this.x + direcs[i][0], this.y + direcs[i][1]]);
        }
    };
    
    Maker.prototype.change = function(num) {
        this.toDo[1] = [];
        for (var i = 0; i < this.toDo[0].length; i++) {
            try {
                if (ARENA[this.toDo[0][i][0]][this.toDo[0][i][1]] === -1) {
                    ARENA[this.toDo[0][i][0]][this.toDo[0][i][1]] = num;        
                    for (var j = 0; j < direcs.length; j++) {
                        this.toDo[1].push([this.toDo[0][i][0] + direcs[j][0], this.toDo[0][i][1] + direcs[j][1]]);
                    }
                }
            } catch(e) {}
        }
        this.toDo[0] = this.toDo[1];
    };
    
    var maker = new Maker();
    
    maker.make();
    maker.add();
    
    var curNum = 0;
    while (maker.toDo[0].length > 0) {
        curNum ++;
        maker.change(curNum);
    }
    
    var platforms = [];
    
    var BasicBlock = function(x, y, character) {
        this.x = x * blockSize * 2;
        this.y = y * blockSize * 2;
        this.character = character;
        this.design = designs[character];
        this.v = 0;
        this.h = 0;
    };
        
    BasicBlock.prototype.display = function() {
        this.design(this.x, this.y);
    };
    
    BasicBlock.prototype.collideRight = function(obj) {
        this.v = (blockSize * 2) - abs(obj.y - this.y);
        this.h = (blockSize * 2) - abs(obj.x - this.x); 
        if (obj.x > this.x && this.v > this.h && this.h > 0) {
            obj.x = this.x + blockSize * 2;
        }
    };
    
    BasicBlock.prototype.collideLeft = function(obj) {
        this.v = (blockSize * 2) - abs(obj.y - this.y);
        this.h = (blockSize * 2) - abs(obj.x - this.x); 
        if (this.x >= obj.x && this.v > this.h && this.h > 0) {
            obj.x = this.x - blockSize * 2;
        }
    };
    
    BasicBlock.prototype.collideTop = function(obj) {
        this.v = (blockSize * 2) - abs(obj.y - this.y);
        this.h = (blockSize * 2) - abs(obj.x - this.x); 
        if (this.y > obj.y && this.h >= this.v && this.v > 0) { 
            obj.y = this.y - blockSize * 2;
            obj.gravity = 0;
            obj.canJump = true;
        }
    };
    
    BasicBlock.prototype.collideBottom = function(obj) {
        this.v = (blockSize * 2) - abs(obj.y - this.y);
        this.h = (blockSize * 2) - abs(obj.x - this.x); 
        if (obj.y >= this.y && this.h >= this.v && this.v > 0) { 
            obj.y = this.y + blockSize * 2;
            obj.gravity = 1;
        }
    };
    
    for (var i = 0; i < ARENA.length; i++) {
        for (var j = 0; j < ARENA[i].length; j++) {
            if (ARENA[i][j] === 99) {
                platforms.push(new BasicBlock(j, i, i > 4 ? i > 7 ? "3" : "4" : "0"));
            }
        }
    }
    
    var keys = [];
    
    var fighter, boss;
    
    var Fighter = function(x, y) {
        this.x = x * blockSize * 2;
        this.y = y * blockSize * 2;
        this.moveX = 0;
        this.moveY = 0;
        this.gravity = 0;
        this.canJump = false;
        this.direc = "right";
        this.recoil = 0;
        this.bullets = [];
        this.canShoot = 20;
        this.lives = 3;
    };
    
    Fighter.prototype.display = function() {
        for (var i = 0; i < this.bullets.length; i++) {
            pushMatrix();
            translate(this.bullets[i].x, this.bullets[i].y);
            if (this.bullets[i].direc === "left") {
                scale(-1, 1);
                this.bullets[i].x -= 8;
            } else {
                this.bullets[i].x += 8;
            }
            fill(150, 150, 150);
            rect(0, 0, 10, 5);
            ellipse(10, 2, 5, 5);
            popMatrix();
        }
        pushMatrix();
        translate(this.x + blockSize, this.y);
        if (this.direc === "left") {
            scale(-1, 1);
        }
        pushMatrix();
        translate(blockSize, blockSize);
        rotate(this.recoil);
        gun(0, 0, blockSize, this.recoil);
        popMatrix();
        popMatrix();
        displayCharacter(curCharacter, blockSize, this.direc,this);
    };
    
    Fighter.prototype.move = function() {
        if (keys[LEFT]) {
            this.direc = "left";
            this.x -= 3;
            this.moveX -= 30;
        }
        if (keys[RIGHT]) {
            this.direc = "right";
            this.x += 3;
            this.moveX += 30;
        }
        
        this.moveX -= this.moveX > 0 ? 10 : 0;
        this.moveX += this.moveX < 0 ? 10 : 0;
        this.moveX = constrain(this.moveX, -40, 40);
        
        if (keys[UP] && this.canJump) {
            this.gravity = -11.8;
            this.canJump = false;
        }
        this.y += this.gravity;
        this.gravity += 0.3;
        
        this.moveY = this.gravity * 10;
        this.moveY = constrain(this.moveY, -40, 40);
        
        this.x = constrain(this.x, 0, width - blockSize * 2);
        
        this.gravity = constrain(this.gravity, -20, 15);
    };
    
    Fighter.prototype.shoot = function() {
        this.canShoot --;
        this.recoil += 5;
        if (keys[32] && this.canShoot < 0) {
            this.recoil = -20;
            this.bullets.push({x : this.x + function(obj) {
                if (obj.direc === "right") {
                    return blockSize * 3 / 2;
                }
                return - blockSize / 2;
            }(this), y : this.y + blockSize, direc : this.direc});
            this.canShoot = 20;
        }
        this.recoil = constrain(this.recoil, -20, 0);
    };
    
    Fighter.prototype.checkBullets = function() {
        for (var i = 0; i < platforms.length; i++) {
            for (var j = 0; j < this.bullets.length; j++) {
                if (
                    this.bullets[j].x + 13 > platforms[i].x &&
                    this.bullets[j].x < platforms[i].x + blockSize * 2 &&
                    this.bullets[j].y + 5 > platforms[i].y &&
                    this.bullets[j].y < platforms[i].y + blockSize * 2 ||
                    this.bullets[j].x + 13 > boss.x &&
                    this.bullets[j].x < boss.x + blockSize * 2 &&
                    this.bullets[j].y + 5 > boss.y &&
                    this.bullets[j].y < boss.y + blockSize * 2 ||
                    
                    this.bullets[j].x > 620 || 
                    this.bullets[j].x < -20
                ) {
                    if (
                    this.bullets[j].x + 13 > boss.x &&
                    this.bullets[j].x < boss.x + blockSize * 2 &&
                    this.bullets[j].y + 5 > boss.y &&
                    this.bullets[j].y < boss.y + blockSize * 2) {
                        boss.lives --;
                    }
                    this.bullets.splice(j, 1);
                }
            }
        }
        if (boss.lives < 1) {
            winBoss();
        }
    };
    
    Fighter.prototype.collide = function() {
        this.canJump = false;
        for (var i = 0; i < platforms.length; i++) {
            platforms[i].collideRight(this);
            platforms[i].collideLeft(this);
            platforms[i].collideTop(this);
            platforms[i].collideBottom(this);
        }
    };
    
    Fighter.prototype.showLives = function() {
        for (var i = 0; i < this.lives; i++) {
            fill(255, 0, 0);
            pushMatrix();
            translate(475 + i * 50 + (3 - this.lives) * 50, 5);
            rotate(45);
            (rect)(0, -5, 20, 35, 7, 7, 0, 0);
            (rect)(-15, 10, 35, 20, 7, 0, 0, 7);
            popMatrix();
        }
    };
    
    fighter = new Fighter(1, 3);
    
    var Boss = function(x, y) {
        this.x = x * blockSize * 2;
        this.y = y * blockSize * 2;
        this.xMove = 0;
        this.yMove = 0;
        this.pos = 0;
        this.gravity = 0;
        this.canJump = false;
        this.spec1 = 0;
        this.spec2 = 0;
        this.direc = "right";
        this.recoil = 0;
        this.bullets = [];
        this.canShoot = 20;
        this.lives = 3;
    };
    
    Boss.prototype.display = function() {
        for (var i = 0; i < this.bullets.length; i++) {
            pushMatrix();
            translate(this.bullets[i].x, this.bullets[i].y);
            if (this.bullets[i].direc === "left") {
                scale(-1, 1);
                this.bullets[i].x -= 8;
            } else {
                this.bullets[i].x += 8;
            }
            fill(150, 150, 150);
            rect(0, 0, 10, 5);
            ellipse(10, 2, 5, 5);
            popMatrix();
        }
        pushMatrix();
        translate(this.x + blockSize, this.y);
        if (this.direc === "left") {
            scale(-1, 1);
        }
        pushMatrix();
        translate(blockSize, blockSize);
        rotate(this.recoil);
        gun(0, 0, blockSize, this.recoil);
        popMatrix();
        master(-blockSize, 0, blockSize, Math.abs(this.xMove) * 40, this.yMove * 4);
        popMatrix();
    };
    
    Boss.prototype.start = function() {
        this.pos = ARENA[Math.max(Math.round(this.y / (blockSize * 2)), 0)][Math.max(Math.round(this.x / (blockSize * 2)), 0)];
    };
    
    Boss.prototype.shoot = function() {
        this.canShoot --;
        this.recoil += 5;
        if (fighter.y + blockSize * 2 > this.y && fighter.y - blockSize * 2 < this.y + blockSize * 2 && this.canShoot < 0) {
            this.recoil = -20;
            this.bullets.push({x : this.x + function(obj) {
                if (obj.direc === "right") {
                    return blockSize * 2;
                }
                return 0;
            }(this), y : this.y + blockSize, direc : this.direc});
            this.canShoot = 20;
        }
        this.recoil = constrain(this.recoil, -20, 0);
    };
    
    Boss.prototype.checkBullets = function() {
        for (var i = 0; i < platforms.length; i++) {
            for (var j = 0; j < this.bullets.length; j++) {
                if (
                    this.bullets[j].x + 13 > platforms[i].x &&
                    this.bullets[j].x < platforms[i].x + blockSize * 2 &&
                    this.bullets[j].y + 5 > platforms[i].y &&
                    this.bullets[j].y < platforms[i].y + blockSize * 2 ||
                    this.bullets[j].x + 13 > fighter.x &&
                    this.bullets[j].x < fighter.x + blockSize * 2 &&
                    this.bullets[j].y + 5 > fighter.y &&
                    this.bullets[j].y < fighter.y + blockSize * 2 ||
                    
                    this.bullets[j].x > 620 || 
                    this.bullets[j].x < -20
                ) {
                    if (
                    this.bullets[j].x + 13 > fighter.x &&
                    this.bullets[j].x < fighter.x + blockSize * 2 &&
                    this.bullets[j].y + 5 > fighter.y &&
                    this.bullets[j].y < fighter.y + blockSize * 2) {
                        fighter.lives --;
                    }
                    this.bullets.splice(j, 1);
                }
            }
        }
        if (fighter.lives < 1) {
            newFight();
            flash.reset();
        }
    };
    
    Boss.prototype.collide = function() {
        this.canJump = false;
        for (var i = 0; i < platforms.length; i++) {
            platforms[i].collideRight(this);
            platforms[i].collideLeft(this);
            platforms[i].collideTop(this);
            platforms[i].collideBottom(this);
        }
    };
    
    Boss.prototype.showLives = function() {
        for (var i = 0; i < this.lives; i++) {
            fill(0, 0, 0);
            pushMatrix();
            translate(50 + i * 50, 5);
            rotate(45);
            (rect)(0, -5, 20, 35, 7, 7, 0, 0);
            (rect)(-15, 10, 35, 20, 7, 0, 0, 7);
            popMatrix();
        }
    };
    
    Boss.prototype.check = function() {
        this.xMove = 0;
        this.yMove = 0;
        for (var i = 0; i < direcs2.length; i++) {
            try {
                if (ARENA[Math.max(Math.round(this.y / (blockSize * 2)), 0) + direcs2[i][1]][Math.max(Math.round(this.x / (blockSize * 2)), 0) + direcs2[i][0]] < this.pos) {
                    
                    this.xMove = direcs2[i][0];
                    this.yMove = direcs2[i][1];
                }
            } catch (e) {}
        }
    };
    
    Boss.prototype.move = function() {
        if (this.xMove === 1) {
            this.x += 3;
            this.direc = "right";
        } else if (this.xMove === -1) {
            this.x -= 3;
            this.direc = "left";
        }
    
        if (
            (this.yMove === 1 && this.xMove === 0 && this.canJump) ||
            (this.yMove === -1 && !this.canJump && this.xMove === 0)
        ) {
            this.spec1 = ARENA[Math.max(Math.round(this.y / (blockSize * 2)), 0)][Math.max(Math.ceil(this.x / (blockSize * 2)) + 1, 0)];
            this.spec2 = ARENA[Math.max(Math.round(this.y / (blockSize * 2)), 0)][Math.max(Math.floor(this.x / (blockSize * 2)) - 1, 0)];
            if (this.spec1 < this.spec2) {
                this.x += 3;
            } else {
                this.x -= 3;
            }
        }
        if (this.yMove === -1 && this.canJump) {
            this.gravity = -11.8;
            this.canJump = false;
        }
        this.y += this.gravity;
        this.gravity += 0.3;
        this.start();
        this.x = constrain(this.x, 0, 600 - blockSize * 2);
    };
    
    boss = new Boss(3, 1);
    
    boss.start();
    
    newFight = function() {
        boss = new Boss(3, 1);
        fighter = new Fighter(1, 3);
        boss.start();
    };
    
    winBoss = function() {
        scene = "after";
        unlocked = Math.max(unlocked, 3);
    };
    
    var game3 = function() {
        Background4();
        
        for (var i = 0; i < platforms.length; i++) {
            platforms[i].display();
        }
        
        fighter.collide();
        
        fighter.display();
        
        fighter.move();
        
        fighter.shoot();
        
        fighter.checkBullets();
        
        boss.collide();
        
        boss.display();
        
        boss.move();
        
        boss.shoot();
        
        boss.checkBullets();
        
        boss.check();
        
        if (frameCount % 60 === 0) {
            resetMap();
            ARENA[Math.max(Math.floor(fighter.y / (blockSize * 2)), 0)][Math.max(Math.floor(fighter.x / (blockSize * 2)), 0)] = 0;
            
            maker.make();
            
            
            maker.toDo = [
                []
            ];
            
            maker.add();
            
            curNum = 0;
            while (maker.toDo[0].length > 0) {
                curNum ++;
                maker.change(curNum);
            }
        }
        
        fighter.showLives();
        
        boss.showLives();
        
        backB2.pack();
    };
}

/** Game four **/
{
    var throwSpeed = 60;
    
    var flyer, asteroids = [];
    
    var Flyer = function() {
        this.x = 300;
        this.y = 500;
        this.r = 0;
        this.lives = 3;
        this.flash = false;
        this.flashSize = 0;
        this.flashFill = 255;
    };
    
    Flyer.prototype.display = function() {
        if (this.flash) {
            noFill();
            stroke(230, 230, 255, this.flashFill);
            strokeWeight(5);
            ellipse(this.x, 500, this.flashSize, this.flashSize);
            this.flashSize += 7;
            this.flashFill -= 10;
            if (this.flashFill < 0) {
                this.flash = false;
                this.flashFill = 255;
                this.flashSize = 0;
            }
        }
        spaceship(this.x, 500, this.r, 50, true);
    };
    
    Flyer.prototype.move = function() {
        if (keys[LEFT]) {
            this.x -= 7;
            this.r -= 10;
        }
        if (keys[RIGHT]) {
            this.x += 7;
            this.r += 10;
        }
        this.x = constrain(this.x, 0, 600);
        this.r += this.r < 0 ? 5 : 0;
        this.r -= this.r > 0 ? 5 : 0;
        this.r = constrain(this.r, -30, 30);
        this.y += 8;
        if (this.end()) {
            flash.reset();
            scene = "win";
        }
    };
    
    Flyer.prototype.collide = function() {
        for (var i = 0; i < asteroids.length; i ++) {
            if (asteroids[i].hit) {
                continue;
            }
            if (asteroids[i].collide(this.x, this.y)) {
                this.y -= 10;
                this.hit(i);
            }
            if (asteroids[i].collide(this.x - 20, this.y - 50)) {
                this.x += 10;
                this.hit(i);
            }
            if (asteroids[i].collide(this.x + 20, this.y - 50)) {
                this.x -= 10;
                this.hit(i);
            }
        }
    };
    
    Flyer.prototype.showStats = function() {
        for (var i = 0; i < this.lives; i++) {
            fill(255, 0, 0);
            pushMatrix();
            translate(475 + i * 50 + (3 - this.lives) * 50, 5);
            rotate(45);
            (rect)(0, -5, 20, 35, 7, 7, 0, 0);
            (rect)(-15, 10, 35, 20, 7, 0, 0, 7);
            popMatrix();
        }
        fill(150, 150, 150);
        rect(550, 100, 20, 200);
        strokeWeight(2);
        stroke(0, 0, 0);
        line(550, 150, 570, 150);
        line(550, 200, 570, 200);
        line(550, 250, 570, 250);
        noStroke();
        fill(255, 255, 255);
        ellipse(560, 300 - this.y / 100, 30 + sin(frameCount * 5) * 5, 30 + sin(frameCount * 5) * 5);
    };
    
    Flyer.prototype.hit = function(num) {
        this.lives --;
        asteroids[num].hit = true;
        this.flash = true;
        this.flashFill = 255;
        this.flashSize = 0;
    };
    
    Flyer.prototype.end = function() {
        return 200 - this.y / 100 < 1;
    };
    
    flyer = new Flyer();
    
    var Asteroid = function() {
        this.size = random(60, 100);
        this.x = random(100, width - 100);
        this.y = -100 - flyer.y + 500;
        this.r = random(0, 360);
        this.angle = random(
            -90, 90
        );
        this.fade = 255;
        this.particles = [];
        for (var i = 0; i < 5; i++) {
            this.particles.push({x : this.x, y : this.y, angle : 72 * i + random(-10, 10), size : random(20, 40)});
        }
        this.hit = false;
        this.rotateSpeed = random(-1, 1);
    };
    
    Asteroid.prototype.display = function() {
        if (this.hit) {
            for (var i = 0; i < this.particles.length; i++) {
                fill(100, 100, 100, this.fade);
                ellipse(this.particles[i].x, this.particles[i].y, this.particles[i].size, this.particles[i].size);
                this.particles[i].x += sin(this.particles[i].angle) * 5;
                this.particles[i].y += cos(this.particles[i].angle) * 5;
            }
            this.fade -= 5;
        } else {
            for (var i = 0; i < this.particles.length; i++) {
                this.particles[i].x = this.x;
            }
            pushMatrix();
            translate(this.x, this.y);
            rotate(this.r);
            imageMode(CORNER);
            image(asteroidImg, -this.size / 2, -this.size / 2.4, this.size, this.size);
            imageMode(CORNER);
            popMatrix();
        }
    };
    
    Asteroid.prototype.move = function() {
        this.x += sin(this.angle) * 2;
        this.r += this.rotateSpeed;
        if (this.x < -this.size / 2) {
            this.x = width + this.size / 2;
        }
        if (this.x > width + this.size / 2) {
            this.x = -this.size / 2;
        }
    };
    
    Asteroid.prototype.out = function() {
        return this.y + flyer.y > height * 2 + this.size - 30;
    };
    
    Asteroid.prototype.collide = function(x, y) {
        return dist(this.x, this.y, x, -(y - 1075)) < this.size * 5 / 12;
    };
    
    newFly = function() {
        flyer.lives = 3;
        flyer.y = 500;
        asteroids = [];
        throwSpeed = 60;
        flash.reset();
    };
    
    var game4 = function() {
        if (frameCount % throwSpeed === 0) {
            asteroids.push(new Asteroid());
            throwSpeed --;
            throwSpeed = Math.max(throwSpeed, 20);
        }
        background(0, 0, 0);
        pushMatrix();
        translate(0, (flyer.y / 5) % 600);
        showStars();
        popMatrix();
        pushMatrix();
        translate(0, (flyer.y / 5) % 600 - 600);
        showStars();
        popMatrix();
        pushMatrix();
        translate(0, flyer.y - 600);
        for (var i = 0; i < asteroids.length; i ++) {
            asteroids[i].move();
            asteroids[i].display();
        }
        popMatrix();
        flyer.move();
        flyer.collide();
        flyer.display();
        flyer.showStats();
        for (var i = 0; i < asteroids.length; i ++) {
            if (asteroids[i].out() || (asteroids[i].hit && asteroids[i].fade < 0)) {
                asteroids.splice(i, 1);
            }
        }
        if (flyer.lives < 1) {
            newFly();
        }
        backB.pack();
    };
}

/** Win **/
{
    var winShip = {x : -300, y : 400};

    var Win = function() {
        targetX = backB2.x;
        targetY = backB2.y;
        background(0, 0, 0);
        showStars();
        spaceship3(winShip.x, winShip.y, 135, 500, true, -0.1);
        winShip.x += (300 - winShip.x) / 10;
        pushMatrix();
        translate(winShip.x - 80, 320);
        rotate(-35);
        displayCharacter(curCharacter, 35, "right", {x : 0, y : 0, moveX : 0, moveY : -40});
        popMatrix();
        textSize(100);
        header("You Won!", backB.fade, 100);
        backB2.pack();
        if (Math.ceil(backB.size) > backB2.toSize - 10) {   
            showSparkles();
        }
    };
}

background(255, 255, 255, 100);

draw = function() {
    cursor("default");
    if (loading) {
        loadGraphics();
    } else if (logoTime < 250) {
        logoTime ++;
        logo();
    } else {
        logoTime ++;
        noStroke();
        continueGameB.sceneTo = "game" + scene[4];
        switch (scene) {
            case "menu" :
                menu();
                break;
            case "levelSelect":
                levelSelect();
                break;
            case "skins":
                skinSelect();
                break;
            case "story":
                story();
                break;
            case "planets":
                planetList();
                break;
            case "part1":
                part1();
                break;
            case "game1":
                game1();
                break;
            case "part2":
                part2();
                break;
            case "game2":
                game2();
                break;
            case "inter1":
                box1();
                break;
            case "inter2":
                box2();
                break;
            case "part3":
                part3();
                break;
            case "game3":
                game3();
                break;
            case "part4":
                part4();
                break;
            case "game4":
                game4();
                break;
            case "after":
                after();
                break;
            case "win":
                Win();
                break;
        }
        flash.display();
    }
    click = false;
};

mouseClicked = function() {
    click = true;
    if (logoTime < 250 && !loading) {
        logoTime = 250;
    }
};

keyPressed = function() {
    keys[keyCode] = true;
    if (keyCode === 82 && scene.startsWith("game")) {
        // Level Restart
        if (scene.endsWith("1")) {
            newLevel();
        } else if (scene.endsWith("2")) {
            newClimb();
        } else if (scene.endsWith("3")) {
            newFight();
        } else if (scene.endsWith("4")) {
            newFly();
        }
    }
};

keyReleased = function() {
    keys[keyCode] = false;
};

